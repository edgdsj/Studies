
L476_BASICCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c0  080059c0  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c8  080059c8  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  080059d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200000d4  08005aa4  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08005aa4  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013381  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002459  00000000  00000000  00033485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  000358e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00036a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027eb5  00000000  00000000  00037a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d05  00000000  00000000  0005f94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7663  00000000  00000000  00073652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016acb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d1c  00000000  00000000  0016ad08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058b0 	.word	0x080058b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	080058b0 	.word	0x080058b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 800058a:	2300      	movs	r3, #0
 800058c:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 800058e:	2300      	movs	r3, #0
 8000590:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000592:	2300      	movs	r3, #0
 8000594:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 800059a:	2300      	movs	r3, #0
 800059c:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 800059e:	2300      	movs	r3, #0
 80005a0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80005a2:	2300      	movs	r3, #0
 80005a4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80005a6:	2300      	movs	r3, #0
 80005a8:	70fb      	strb	r3, [r7, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 80005aa:	2300      	movs	r3, #0
 80005ac:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80005ae:	2300      	movs	r3, #0
 80005b0:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80005b2:	2300      	movs	r3, #0
 80005b4:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80005b6:	2300      	movs	r3, #0
 80005b8:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80005be:	2308      	movs	r3, #8
 80005c0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80005c6:	2300      	movs	r3, #0
 80005c8:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 80005ca:	2300      	movs	r3, #0
 80005cc:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80005ee:	2300      	movs	r3, #0
 80005f0:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80005f2:	2300      	movs	r3, #0
 80005f4:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 80005fa:	2300      	movs	r3, #0
 80005fc:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80005fe:	2308      	movs	r3, #8
 8000600:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	72fb      	strb	r3, [r7, #11]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800060a:	f000 f943 	bl	8000894 <MCP2515_Initialize>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <CANSPI_Initialize+0x9a>
    return false;
 800061a:	2300      	movs	r3, #0
 800061c:	e05e      	b.n	80006dc <CANSPI_Initialize+0x158>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 800061e:	f000 f95b 	bl	80008d8 <MCP2515_SetConfigMode>
 8000622:	4603      	mov	r3, r0
 8000624:	f083 0301 	eor.w	r3, r3, #1
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <CANSPI_Initialize+0xae>
    return false;
 800062e:	2300      	movs	r3, #0
 8000630:	e054      	b.n	80006dc <CANSPI_Initialize+0x158>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	461a      	mov	r2, r3
 8000636:	2123      	movs	r1, #35	; 0x23
 8000638:	2020      	movs	r0, #32
 800063a:	f000 f9f1 	bl	8000a20 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800063e:	463b      	mov	r3, r7
 8000640:	461a      	mov	r2, r3
 8000642:	2127      	movs	r1, #39	; 0x27
 8000644:	2024      	movs	r0, #36	; 0x24
 8000646:	f000 f9eb 	bl	8000a20 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	461a      	mov	r2, r3
 8000650:	2103      	movs	r1, #3
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f9e4 	bl	8000a20 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000658:	f107 0318 	add.w	r3, r7, #24
 800065c:	461a      	mov	r2, r3
 800065e:	2107      	movs	r1, #7
 8000660:	2004      	movs	r0, #4
 8000662:	f000 f9dd 	bl	8000a20 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	461a      	mov	r2, r3
 800066c:	210b      	movs	r1, #11
 800066e:	2008      	movs	r0, #8
 8000670:	f000 f9d6 	bl	8000a20 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	461a      	mov	r2, r3
 800067a:	2113      	movs	r1, #19
 800067c:	2010      	movs	r0, #16
 800067e:	f000 f9cf 	bl	8000a20 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	461a      	mov	r2, r3
 8000688:	2117      	movs	r1, #23
 800068a:	2014      	movs	r0, #20
 800068c:	f000 f9c8 	bl	8000a20 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	461a      	mov	r2, r3
 8000696:	211b      	movs	r1, #27
 8000698:	2018      	movs	r0, #24
 800069a:	f000 f9c1 	bl	8000a20 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 800069e:	2104      	movs	r1, #4
 80006a0:	2060      	movs	r0, #96	; 0x60
 80006a2:	f000 f999 	bl	80009d8 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80006a6:	2101      	movs	r1, #1
 80006a8:	2070      	movs	r0, #112	; 0x70
 80006aa:	f000 f995 	bl	80009d8 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80006ae:	2100      	movs	r1, #0
 80006b0:	202a      	movs	r0, #42	; 0x2a
 80006b2:	f000 f991 	bl	80009d8 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80006b6:	21e5      	movs	r1, #229	; 0xe5
 80006b8:	2029      	movs	r0, #41	; 0x29
 80006ba:	f000 f98d 	bl	80009d8 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80006be:	2183      	movs	r1, #131	; 0x83
 80006c0:	2028      	movs	r0, #40	; 0x28
 80006c2:	f000 f989 	bl	80009d8 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80006c6:	f000 f925 	bl	8000914 <MCP2515_SetNormalMode>
 80006ca:	4603      	mov	r3, r0
 80006cc:	f083 0301 	eor.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <CANSPI_Initialize+0x156>
    return false;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <CANSPI_Initialize+0x158>
  
  return true;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <CANSPI_Receive>:
  return (returnValue);
}

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80006f0:	f000 f9c0 	bl	8000a74 <MCP2515_GetRxStatus>
 80006f4:	4603      	mov	r3, r0
 80006f6:	733b      	strb	r3, [r7, #12]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 80006f8:	7b3b      	ldrb	r3, [r7, #12]
 80006fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b00      	cmp	r3, #0
 8000702:	d066      	beq.n	80007d2 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000704:	7b3b      	ldrb	r3, [r7, #12]
 8000706:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b40      	cmp	r3, #64	; 0x40
 800070e:	bf0c      	ite	eq
 8000710:	2301      	moveq	r3, #1
 8000712:	2300      	movne	r3, #0
 8000714:	b2da      	uxtb	r2, r3
 8000716:	7b3b      	ldrb	r3, [r7, #12]
 8000718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2bc0      	cmp	r3, #192	; 0xc0
 8000720:	bf0c      	ite	eq
 8000722:	2301      	moveq	r3, #1
 8000724:	2300      	movne	r3, #0
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4313      	orrs	r3, r2
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d007      	beq.n	8000740 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000730:	f107 0310 	add.w	r3, r7, #16
 8000734:	220d      	movs	r2, #13
 8000736:	4619      	mov	r1, r3
 8000738:	2090      	movs	r0, #144	; 0x90
 800073a:	f000 f92b 	bl	8000994 <MCP2515_ReadRxSequence>
 800073e:	e00c      	b.n	800075a <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8000740:	7b3b      	ldrb	r3, [r7, #12]
 8000742:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b80      	cmp	r3, #128	; 0x80
 800074a:	d106      	bne.n	800075a <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	220d      	movs	r2, #13
 8000752:	4619      	mov	r1, r3
 8000754:	2094      	movs	r0, #148	; 0x94
 8000756:	f000 f91d 	bl	8000994 <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800075a:	7b3b      	ldrb	r3, [r7, #12]
 800075c:	f003 0318 	and.w	r3, r3, #24
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b10      	cmp	r3, #16
 8000764:	d10c      	bne.n	8000780 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2202      	movs	r2, #2
 800076a:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800076c:	7cb8      	ldrb	r0, [r7, #18]
 800076e:	7cf9      	ldrb	r1, [r7, #19]
 8000770:	7c3a      	ldrb	r2, [r7, #16]
 8000772:	7c7b      	ldrb	r3, [r7, #17]
 8000774:	f000 f832 	bl	80007dc <convertReg2ExtendedCANid>
 8000778:	4602      	mov	r2, r0
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	e00b      	b.n	8000798 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000786:	7c3b      	ldrb	r3, [r7, #16]
 8000788:	7c7a      	ldrb	r2, [r7, #17]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f863 	bl	8000858 <convertReg2StandardCANid>
 8000792:	4602      	mov	r2, r0
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000798:	7d3a      	ldrb	r2, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800079e:	7d7a      	ldrb	r2, [r7, #21]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80007a4:	7dba      	ldrb	r2, [r7, #22]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80007aa:	7dfa      	ldrb	r2, [r7, #23]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 80007b0:	7e3a      	ldrb	r2, [r7, #24]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 80007b6:	7e7a      	ldrb	r2, [r7, #25]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 80007bc:	7eba      	ldrb	r2, [r7, #26]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 80007c2:	7efa      	ldrb	r2, [r7, #27]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 80007c8:	7f3a      	ldrb	r2, [r7, #28]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 80007d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80007dc:	b490      	push	{r4, r7}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4604      	mov	r4, r0
 80007e4:	4608      	mov	r0, r1
 80007e6:	4611      	mov	r1, r2
 80007e8:	461a      	mov	r2, r3
 80007ea:	4623      	mov	r3, r4
 80007ec:	71fb      	strb	r3, [r7, #7]
 80007ee:	4603      	mov	r3, r0
 80007f0:	71bb      	strb	r3, [r7, #6]
 80007f2:	460b      	mov	r3, r1
 80007f4:	717b      	strb	r3, [r7, #5]
 80007f6:	4613      	mov	r3, r2
 80007f8:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000802:	793b      	ldrb	r3, [r7, #4]
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800080a:	793b      	ldrb	r3, [r7, #4]
 800080c:	095b      	lsrs	r3, r3, #5
 800080e:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000810:	797b      	ldrb	r3, [r7, #5]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4413      	add	r3, r2
 800081c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	4413      	add	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	021b      	lsls	r3, r3, #8
 8000830:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4413      	add	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4413      	add	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800084c:	697b      	ldr	r3, [r7, #20]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bc90      	pop	{r4, r7}
 8000856:	4770      	bx	lr

08000858 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	095b      	lsrs	r3, r3, #5
 8000876:	b2db      	uxtb	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	4413      	add	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8000884:	68fb      	ldr	r3, [r7, #12]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 800089a:	2201      	movs	r2, #1
 800089c:	2140      	movs	r1, #64	; 0x40
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <MCP2515_Initialize+0x3c>)
 80008a0:	f001 f85c 	bl	800195c <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80008a4:	230a      	movs	r3, #10
 80008a6:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80008a8:	480a      	ldr	r0, [pc, #40]	; (80008d4 <MCP2515_Initialize+0x40>)
 80008aa:	f003 f8fd 	bl	8003aa8 <HAL_SPI_GetState>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d101      	bne.n	80008b8 <MCP2515_Initialize+0x24>
      return true;
 80008b4:	2301      	movs	r3, #1
 80008b6:	e006      	b.n	80008c6 <MCP2515_Initialize+0x32>
    
    loop--;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	3b01      	subs	r3, #1
 80008bc:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1f1      	bne.n	80008a8 <MCP2515_Initialize+0x14>
      
  return false;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	48000400 	.word	0x48000400
 80008d4:	200000f0 	.word	0x200000f0

080008d8 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80008de:	2180      	movs	r1, #128	; 0x80
 80008e0:	200f      	movs	r0, #15
 80008e2:	f000 f879 	bl	80009d8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 80008e6:	230a      	movs	r3, #10
 80008e8:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80008ea:	200e      	movs	r0, #14
 80008ec:	f000 f830 	bl	8000950 <MCP2515_ReadByte>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80008f6:	2b80      	cmp	r3, #128	; 0x80
 80008f8:	d101      	bne.n	80008fe <MCP2515_SetConfigMode+0x26>
      return true;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e006      	b.n	800090c <MCP2515_SetConfigMode+0x34>
    
    loop--;
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	3b01      	subs	r3, #1
 8000902:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1ef      	bne.n	80008ea <MCP2515_SetConfigMode+0x12>
  
  return false;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800091a:	2100      	movs	r1, #0
 800091c:	200f      	movs	r0, #15
 800091e:	f000 f85b 	bl	80009d8 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000922:	230a      	movs	r3, #10
 8000924:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000926:	200e      	movs	r0, #14
 8000928:	f000 f812 	bl	8000950 <MCP2515_ReadByte>
 800092c:	4603      	mov	r3, r0
 800092e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <MCP2515_SetNormalMode+0x26>
      return true;
 8000936:	2301      	movs	r3, #1
 8000938:	e006      	b.n	8000948 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	3b01      	subs	r3, #1
 800093e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1ef      	bne.n	8000926 <MCP2515_SetNormalMode+0x12>
  
  return false;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MCP2515_ReadByte+0x40>)
 8000960:	f000 fffc 	bl	800195c <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f8a1 	bl	8000aac <SPI_Tx>
  SPI_Tx(address);
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f89d 	bl	8000aac <SPI_Tx>
  retVal = SPI_Rx();
 8000972:	f000 f8c1 	bl	8000af8 <SPI_Rx>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 800097a:	2201      	movs	r2, #1
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	4804      	ldr	r0, [pc, #16]	; (8000990 <MCP2515_ReadByte+0x40>)
 8000980:	f000 ffec 	bl	800195c <HAL_GPIO_WritePin>
  
  return retVal;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	48000400 	.word	0x48000400

08000994 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80009a4:	2200      	movs	r2, #0
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	480a      	ldr	r0, [pc, #40]	; (80009d4 <MCP2515_ReadRxSequence+0x40>)
 80009aa:	f000 ffd7 	bl	800195c <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 f87b 	bl	8000aac <SPI_Tx>
  SPI_RxBuffer(data, length);
 80009b6:	79bb      	ldrb	r3, [r7, #6]
 80009b8:	4619      	mov	r1, r3
 80009ba:	6838      	ldr	r0, [r7, #0]
 80009bc:	f000 f8ac 	bl	8000b18 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80009c0:	2201      	movs	r2, #1
 80009c2:	2140      	movs	r1, #64	; 0x40
 80009c4:	4803      	ldr	r0, [pc, #12]	; (80009d4 <MCP2515_ReadRxSequence+0x40>)
 80009c6:	f000 ffc9 	bl	800195c <HAL_GPIO_WritePin>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	48000400 	.word	0x48000400

080009d8 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	460a      	mov	r2, r1
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	4613      	mov	r3, r2
 80009e6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 80009e8:	2200      	movs	r2, #0
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <MCP2515_WriteByte+0x44>)
 80009ee:	f000 ffb5 	bl	800195c <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 80009f2:	2002      	movs	r0, #2
 80009f4:	f000 f85a 	bl	8000aac <SPI_Tx>
  SPI_Tx(address);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f856 	bl	8000aac <SPI_Tx>
  SPI_Tx(data);  
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f852 	bl	8000aac <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MCP2515_WriteByte+0x44>)
 8000a0e:	f000 ffa5 	bl	800195c <HAL_GPIO_WritePin>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	48000400 	.word	0x48000400

08000a20 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	603a      	str	r2, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000a30:	2200      	movs	r2, #0
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	480e      	ldr	r0, [pc, #56]	; (8000a70 <MCP2515_WriteByteSequence+0x50>)
 8000a36:	f000 ff91 	bl	800195c <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f000 f836 	bl	8000aac <SPI_Tx>
  SPI_Tx(startAddress);
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f832 	bl	8000aac <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000a48:	79ba      	ldrb	r2, [r7, #6]
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	3301      	adds	r3, #1
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	6838      	ldr	r0, [r7, #0]
 8000a58:	f000 f83a 	bl	8000ad0 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2140      	movs	r1, #64	; 0x40
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <MCP2515_WriteByteSequence+0x50>)
 8000a62:	f000 ff7b 	bl	800195c <HAL_GPIO_WritePin>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	48000400 	.word	0x48000400

08000a74 <MCP2515_GetRxStatus>:
  return retVal;
}

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	480a      	ldr	r0, [pc, #40]	; (8000aa8 <MCP2515_GetRxStatus+0x34>)
 8000a80:	f000 ff6c 	bl	800195c <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 8000a84:	20b0      	movs	r0, #176	; 0xb0
 8000a86:	f000 f811 	bl	8000aac <SPI_Tx>
  retVal = SPI_Rx();
 8000a8a:	f000 f835 	bl	8000af8 <SPI_Rx>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000a92:	2201      	movs	r2, #1
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MCP2515_GetRxStatus+0x34>)
 8000a98:	f000 ff60 	bl	800195c <HAL_GPIO_WritePin>
  
  return retVal;
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	48000400 	.word	0x48000400

08000aac <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 8000ab6:	1df9      	adds	r1, r7, #7
 8000ab8:	230a      	movs	r3, #10
 8000aba:	2201      	movs	r2, #1
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <SPI_Tx+0x20>)
 8000abe:	f002 fb42 	bl	8003146 <HAL_SPI_Transmit>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000f0 	.word	0x200000f0

08000ad0 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	230a      	movs	r3, #10
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	4803      	ldr	r0, [pc, #12]	; (8000af4 <SPI_TxBuffer+0x24>)
 8000ae6:	f002 fb2e 	bl	8003146 <HAL_SPI_Transmit>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000f0 	.word	0x200000f0

08000af8 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000afe:	1df9      	adds	r1, r7, #7
 8000b00:	230a      	movs	r3, #10
 8000b02:	2201      	movs	r2, #1
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <SPI_Rx+0x1c>)
 8000b06:	f002 fc8c 	bl	8003422 <HAL_SPI_Receive>
  return retVal;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200000f0 	.word	0x200000f0

08000b18 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	460b      	mov	r3, r1
 8000b22:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	230a      	movs	r3, #10
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <SPI_RxBuffer+0x24>)
 8000b2e:	f002 fc78 	bl	8003422 <HAL_SPI_Receive>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000f0 	.word	0x200000f0

08000b40 <main>:
char temp[50];

uCAN_MSG rxMessage;

int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  HAL_Init();
 8000b46:	f000 fbb4 	bl	80012b2 <HAL_Init>

  SystemClock_Config();
 8000b4a:	f000 f8d3 	bl	8000cf4 <SystemClock_Config>

  MX_GPIO_Init();
 8000b4e:	f000 f9bd 	bl	8000ecc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b52:	f000 f915 	bl	8000d80 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000b56:	f000 f951 	bl	8000dfc <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000b5a:	f000 f987 	bl	8000e6c <MX_USART2_UART_Init>

  HAL_TIM_Base_Start_IT(&htim6);
 8000b5e:	4852      	ldr	r0, [pc, #328]	; (8000ca8 <main+0x168>)
 8000b60:	f003 f9c4 	bl	8003eec <HAL_TIM_Base_Start_IT>
  uint8_t status = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	71fb      	strb	r3, [r7, #7]
  while(1){
    if(CANSPI_Initialize()){
 8000b68:	f7ff fd0c 	bl	8000584 <CANSPI_Initialize>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d0fa      	beq.n	8000b68 <main+0x28>
    	HAL_UART_Transmit(&huart2, "Init OK\n\r", 10 , HAL_MAX_DELAY);
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b76:	220a      	movs	r2, #10
 8000b78:	494c      	ldr	r1, [pc, #304]	; (8000cac <main+0x16c>)
 8000b7a:	484d      	ldr	r0, [pc, #308]	; (8000cb0 <main+0x170>)
 8000b7c:	f003 fcfc 	bl	8004578 <HAL_UART_Transmit>
    	status = MCP2515_ReadByte(0x0F);
 8000b80:	200f      	movs	r0, #15
 8000b82:	f7ff fee5 	bl	8000950 <MCP2515_ReadByte>
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
    	sprintf(msg, "Status: %d\n\r", status);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4949      	ldr	r1, [pc, #292]	; (8000cb4 <main+0x174>)
 8000b90:	4849      	ldr	r0, [pc, #292]	; (8000cb8 <main+0x178>)
 8000b92:	f004 fa1f 	bl	8004fd4 <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *)msg, (uint8_t)strlen(msg), HAL_MAX_DELAY);
 8000b96:	4848      	ldr	r0, [pc, #288]	; (8000cb8 <main+0x178>)
 8000b98:	f7ff fb1a 	bl	80001d0 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba6:	4944      	ldr	r1, [pc, #272]	; (8000cb8 <main+0x178>)
 8000ba8:	4841      	ldr	r0, [pc, #260]	; (8000cb0 <main+0x170>)
 8000baa:	f003 fce5 	bl	8004578 <HAL_UART_Transmit>

  }

  while (1)
  {
	if(CANSPI_Receive(&rxMessage))
 8000bae:	4843      	ldr	r0, [pc, #268]	; (8000cbc <main+0x17c>)
 8000bb0:	f7ff fd98 	bl	80006e4 <CANSPI_Receive>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d071      	beq.n	8000c9e <main+0x15e>
	{
		sprintf(msg," Frame Type: %d", rxMessage.frame.idType);
 8000bba:	4b40      	ldr	r3, [pc, #256]	; (8000cbc <main+0x17c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	493f      	ldr	r1, [pc, #252]	; (8000cc0 <main+0x180>)
 8000bc2:	483d      	ldr	r0, [pc, #244]	; (8000cb8 <main+0x178>)
 8000bc4:	f004 fa06 	bl	8004fd4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, (uint8_t)strlen(msg), HAL_MAX_DELAY);
 8000bc8:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <main+0x178>)
 8000bca:	f7ff fb01 	bl	80001d0 <strlen>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd8:	4937      	ldr	r1, [pc, #220]	; (8000cb8 <main+0x178>)
 8000bda:	4835      	ldr	r0, [pc, #212]	; (8000cb0 <main+0x170>)
 8000bdc:	f003 fccc 	bl	8004578 <HAL_UART_Transmit>
		sprintf(msg," Frame Id: %ld", rxMessage.frame.id);
 8000be0:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <main+0x17c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4937      	ldr	r1, [pc, #220]	; (8000cc4 <main+0x184>)
 8000be8:	4833      	ldr	r0, [pc, #204]	; (8000cb8 <main+0x178>)
 8000bea:	f004 f9f3 	bl	8004fd4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, (uint8_t)strlen(msg), HAL_MAX_DELAY);
 8000bee:	4832      	ldr	r0, [pc, #200]	; (8000cb8 <main+0x178>)
 8000bf0:	f7ff faee 	bl	80001d0 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bfe:	492e      	ldr	r1, [pc, #184]	; (8000cb8 <main+0x178>)
 8000c00:	482b      	ldr	r0, [pc, #172]	; (8000cb0 <main+0x170>)
 8000c02:	f003 fcb9 	bl	8004578 <HAL_UART_Transmit>
		sprintf(msg," Frame DLC: %d", rxMessage.frame.dlc);
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <main+0x17c>)
 8000c08:	7a1b      	ldrb	r3, [r3, #8]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	492e      	ldr	r1, [pc, #184]	; (8000cc8 <main+0x188>)
 8000c0e:	482a      	ldr	r0, [pc, #168]	; (8000cb8 <main+0x178>)
 8000c10:	f004 f9e0 	bl	8004fd4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, (uint8_t)strlen(msg), HAL_MAX_DELAY);
 8000c14:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <main+0x178>)
 8000c16:	f7ff fadb 	bl	80001d0 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c24:	4924      	ldr	r1, [pc, #144]	; (8000cb8 <main+0x178>)
 8000c26:	4822      	ldr	r0, [pc, #136]	; (8000cb0 <main+0x170>)
 8000c28:	f003 fca6 	bl	8004578 <HAL_UART_Transmit>
		sprintf(msg," Frame D0: %d", rxMessage.frame.data0);
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <main+0x17c>)
 8000c2e:	7a5b      	ldrb	r3, [r3, #9]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4926      	ldr	r1, [pc, #152]	; (8000ccc <main+0x18c>)
 8000c34:	4820      	ldr	r0, [pc, #128]	; (8000cb8 <main+0x178>)
 8000c36:	f004 f9cd 	bl	8004fd4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, (uint8_t)strlen(msg), HAL_MAX_DELAY);
 8000c3a:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <main+0x178>)
 8000c3c:	f7ff fac8 	bl	80001d0 <strlen>
 8000c40:	4603      	mov	r3, r0
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c4a:	491b      	ldr	r1, [pc, #108]	; (8000cb8 <main+0x178>)
 8000c4c:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <main+0x170>)
 8000c4e:	f003 fc93 	bl	8004578 <HAL_UART_Transmit>
		sprintf(msg," Frame D1: %d", rxMessage.frame.data1);
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <main+0x17c>)
 8000c54:	7a9b      	ldrb	r3, [r3, #10]
 8000c56:	461a      	mov	r2, r3
 8000c58:	491d      	ldr	r1, [pc, #116]	; (8000cd0 <main+0x190>)
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <main+0x178>)
 8000c5c:	f004 f9ba 	bl	8004fd4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, (uint8_t)strlen(msg), HAL_MAX_DELAY);
 8000c60:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <main+0x178>)
 8000c62:	f7ff fab5 	bl	80001d0 <strlen>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c70:	4911      	ldr	r1, [pc, #68]	; (8000cb8 <main+0x178>)
 8000c72:	480f      	ldr	r0, [pc, #60]	; (8000cb0 <main+0x170>)
 8000c74:	f003 fc80 	bl	8004578 <HAL_UART_Transmit>
		sprintf(msg," Frame D2: %d\n\r", rxMessage.frame.data2);
 8000c78:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <main+0x17c>)
 8000c7a:	7adb      	ldrb	r3, [r3, #11]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4915      	ldr	r1, [pc, #84]	; (8000cd4 <main+0x194>)
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <main+0x178>)
 8000c82:	f004 f9a7 	bl	8004fd4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, (uint8_t)strlen(msg), HAL_MAX_DELAY);
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <main+0x178>)
 8000c88:	f7ff faa2 	bl	80001d0 <strlen>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <main+0x178>)
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <main+0x170>)
 8000c9a:	f003 fc6d 	bl	8004578 <HAL_UART_Transmit>
	}
//	status = 0;
//	status = MCP2515_ReadByte(0x0F);
//	sprintf(msg,"Status: %d\n\r", status);
//	HAL_UART_Transmit(&huart2, (uint8_t *)msg, (uint8_t)strlen(msg), HAL_MAX_DELAY);
	HAL_Delay(1000);
 8000c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca2:	f000 fb7b 	bl	800139c <HAL_Delay>
	if(CANSPI_Receive(&rxMessage))
 8000ca6:	e782      	b.n	8000bae <main+0x6e>
 8000ca8:	20000154 	.word	0x20000154
 8000cac:	080058c8 	.word	0x080058c8
 8000cb0:	200001a0 	.word	0x200001a0
 8000cb4:	080058d4 	.word	0x080058d4
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000224 	.word	0x20000224
 8000cc0:	080058e4 	.word	0x080058e4
 8000cc4:	080058f4 	.word	0x080058f4
 8000cc8:	08005904 	.word	0x08005904
 8000ccc:	08005914 	.word	0x08005914
 8000cd0:	08005924 	.word	0x08005924
 8000cd4:	08005934 	.word	0x08005934

08000cd8 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000ce4:	f000 fe52 	bl	800198c <HAL_GPIO_TogglePin>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	48000800 	.word	0x48000800

08000cf4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b096      	sub	sp, #88	; 0x58
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2244      	movs	r2, #68	; 0x44
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 f95e 	bl	8004fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d1a:	f000 fe5f 	bl	80019dc <HAL_PWREx_ControlVoltageScaling>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d24:	f000 f932 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d34:	2360      	movs	r3, #96	; 0x60
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fea1 	bl	8001a88 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d4c:	f000 f91e 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fa69 	bl	8002240 <HAL_RCC_ClockConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d74:	f000 f90a 	bl	8000f8c <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3758      	adds	r7, #88	; 0x58
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_SPI1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000d8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000d9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dce:	2207      	movs	r2, #7
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000dda:	2208      	movs	r2, #8
 8000ddc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_SPI1_Init+0x74>)
 8000de0:	f002 f90e 	bl	8003000 <HAL_SPI_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f8cf 	bl	8000f8c <Error_Handler>
  }
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000f0 	.word	0x200000f0
 8000df8:	40013000 	.word	0x40013000

08000dfc <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_TIM6_Init+0x68>)
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <MX_TIM6_Init+0x6c>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 400-1;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_TIM6_Init+0x68>)
 8000e14:	f240 128f 	movw	r2, #399	; 0x18f
 8000e18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_TIM6_Init+0x68>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_TIM6_Init+0x68>)
 8000e22:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_TIM6_Init+0x68>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e2e:	480d      	ldr	r0, [pc, #52]	; (8000e64 <MX_TIM6_Init+0x68>)
 8000e30:	f003 f804 	bl	8003e3c <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e3a:	f000 f8a7 	bl	8000f8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <MX_TIM6_Init+0x68>)
 8000e4c:	f003 faa0 	bl	8004390 <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000e56:	f000 f899 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000154 	.word	0x20000154
 8000e68:	40001000 	.word	0x40001000

08000e6c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <MX_USART2_UART_Init+0x5c>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e92:	220c      	movs	r2, #12
 8000e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_USART2_UART_Init+0x58>)
 8000eb0:	f003 fb14 	bl	80044dc <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eba:	f000 f867 	bl	8000f8c <Error_Handler>
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001a0 	.word	0x200001a0
 8000ec8:	40004400 	.word	0x40004400

08000ecc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_GPIO_Init+0xb4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000f30:	f000 fd14 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <MX_GPIO_Init+0xbc>)
 8000f3a:	f000 fd0f 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <MX_GPIO_Init+0xb8>)
 8000f56:	f000 fb57 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f5a:	2340      	movs	r3, #64	; 0x40
 8000f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_GPIO_Init+0xbc>)
 8000f72:	f000 fb49 	bl	8001608 <HAL_GPIO_Init>

}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000400 	.word	0x48000400

08000f8c <Error_Handler>:

void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_MspInit+0x44>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6613      	str	r3, [r2, #96]	; 0x60
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_MspInit+0x44>)
 8000fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_MspInit+0x44>)
 8000fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fba:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <HAL_MspInit+0x44>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_MspInit+0x44>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <HAL_SPI_MspInit+0x7c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d128      	bne.n	8001054 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_SPI_MspInit+0x80>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	4a16      	ldr	r2, [pc, #88]	; (8001060 <HAL_SPI_MspInit+0x80>)
 8001008:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800100c:	6613      	str	r3, [r2, #96]	; 0x60
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_SPI_MspInit+0x80>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_SPI_MspInit+0x80>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_SPI_MspInit+0x80>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_SPI_MspInit+0x80>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001032:	23e0      	movs	r3, #224	; 0xe0
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001042:	2305      	movs	r3, #5
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001050:	f000 fada 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001054:	bf00      	nop
 8001056:	3728      	adds	r7, #40	; 0x28
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40013000 	.word	0x40013000
 8001060:	40021000 	.word	0x40021000

08001064 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_TIM_Base_MspInit+0x44>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d113      	bne.n	800109e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_TIM_Base_MspInit+0x48>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_TIM_Base_MspInit+0x48>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6593      	str	r3, [r2, #88]	; 0x58
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_TIM_Base_MspInit+0x48>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2036      	movs	r0, #54	; 0x36
 8001094:	f000 fa81 	bl	800159a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001098:	2036      	movs	r0, #54	; 0x36
 800109a:	f000 fa9a 	bl	80015d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40001000 	.word	0x40001000
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0ac      	sub	sp, #176	; 0xb0
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2288      	movs	r2, #136	; 0x88
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 ff77 	bl	8004fc4 <memset>
  if(huart->Instance==USART2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a21      	ldr	r2, [pc, #132]	; (8001160 <HAL_UART_MspInit+0xb0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d13b      	bne.n	8001158 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 facb 	bl	8002688 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f8:	f7ff ff48 	bl	8000f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <HAL_UART_MspInit+0xb4>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_UART_MspInit+0xb4>)
 8001102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001106:	6593      	str	r3, [r2, #88]	; 0x58
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_UART_MspInit+0xb4>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_UART_MspInit+0xb4>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_UART_MspInit+0xb4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_UART_MspInit+0xb4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800112c:	230c      	movs	r3, #12
 800112e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001144:	2307      	movs	r3, #7
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f000 fa58 	bl	8001608 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	37b0      	adds	r7, #176	; 0xb0
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40004400 	.word	0x40004400
 8001164:	40021000 	.word	0x40021000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f8d2 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM6_DAC_IRQHandler+0x10>)
 80011c2:	f002 ff03 	bl	8003fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000154 	.word	0x20000154

080011d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d8:	4a14      	ldr	r2, [pc, #80]	; (800122c <_sbrk+0x5c>)
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <_sbrk+0x60>)
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d102      	bne.n	80011f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <_sbrk+0x64>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	; (8001238 <_sbrk+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d207      	bcs.n	8001210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001200:	f003 feb6 	bl	8004f70 <__errno>
 8001204:	4603      	mov	r3, r0
 8001206:	220c      	movs	r2, #12
 8001208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120e:	e009      	b.n	8001224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <_sbrk+0x64>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <_sbrk+0x64>)
 8001220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20018000 	.word	0x20018000
 8001230:	00000400 	.word	0x00000400
 8001234:	20000238 	.word	0x20000238
 8001238:	20000250 	.word	0x20000250

0800123c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <SystemInit+0x20>)
 8001242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <SystemInit+0x20>)
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff ffea 	bl	800123c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f003 fe75 	bl	8004f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001292:	f7ff fc55 	bl	8000b40 <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001298:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80012a4:	080059d0 	.word	0x080059d0
  ldr r2, =_sbss
 80012a8:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80012ac:	20000250 	.word	0x20000250

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>

080012b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f961 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c2:	200f      	movs	r0, #15
 80012c4:	f000 f80e 	bl	80012e4 <HAL_InitTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	e001      	b.n	80012d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d4:	f7ff fe60 	bl	8000f98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_InitTick+0x6c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d023      	beq.n	8001340 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_InitTick+0x70>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_InitTick+0x6c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f96d 	bl	80015ee <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10f      	bne.n	800133a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d809      	bhi.n	8001334 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001328:	f000 f937 	bl	800159a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_InitTick+0x74>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e007      	b.n	8001344 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e004      	b.n	8001344 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e001      	b.n	8001344 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000006c 	.word	0x2000006c
 8001354:	20000064 	.word	0x20000064
 8001358:	20000068 	.word	0x20000068

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	2000006c 	.word	0x2000006c
 8001380:	2000023c 	.word	0x2000023c

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000023c 	.word	0x2000023c

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff ffee 	bl	8001384 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_Delay+0x44>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffde 	bl	8001384 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000006c 	.word	0x2000006c

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff29 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff3e 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff31 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001616:	e17f      	b.n	8001918 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 8171 	beq.w	8001912 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d005      	beq.n	8001648 <HAL_GPIO_Init+0x40>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d130      	bne.n	80016aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167e:	2201      	movs	r2, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 0201 	and.w	r2, r3, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d118      	bne.n	80016e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016bc:	2201      	movs	r2, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	08db      	lsrs	r3, r3, #3
 80016d2:	f003 0201 	and.w	r2, r3, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d017      	beq.n	8001724 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d123      	bne.n	8001778 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	08da      	lsrs	r2, r3, #3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3208      	adds	r2, #8
 8001738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	220f      	movs	r2, #15
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	6939      	ldr	r1, [r7, #16]
 8001774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0203 	and.w	r2, r3, #3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80ac 	beq.w	8001912 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017be:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6613      	str	r3, [r2, #96]	; 0x60
 80017c6:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_GPIO_Init+0x330>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017d2:	4a5a      	ldr	r2, [pc, #360]	; (800193c <HAL_GPIO_Init+0x334>)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017fc:	d025      	beq.n	800184a <HAL_GPIO_Init+0x242>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x338>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d01f      	beq.n	8001846 <HAL_GPIO_Init+0x23e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_GPIO_Init+0x33c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d019      	beq.n	8001842 <HAL_GPIO_Init+0x23a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x340>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d013      	beq.n	800183e <HAL_GPIO_Init+0x236>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_GPIO_Init+0x344>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00d      	beq.n	800183a <HAL_GPIO_Init+0x232>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x348>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <HAL_GPIO_Init+0x22e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x34c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d101      	bne.n	8001832 <HAL_GPIO_Init+0x22a>
 800182e:	2306      	movs	r3, #6
 8001830:	e00c      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001832:	2307      	movs	r3, #7
 8001834:	e00a      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001836:	2305      	movs	r3, #5
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x244>
 800183a:	2304      	movs	r3, #4
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x244>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x244>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x244>
 800184a:	2300      	movs	r3, #0
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800185c:	4937      	ldr	r1, [pc, #220]	; (800193c <HAL_GPIO_Init+0x334>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_GPIO_Init+0x350>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800188e:	4a32      	ldr	r2, [pc, #200]	; (8001958 <HAL_GPIO_Init+0x350>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001894:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_GPIO_Init+0x350>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018e2:	4a1d      	ldr	r2, [pc, #116]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_GPIO_Init+0x350>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_GPIO_Init+0x350>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa22 f303 	lsr.w	r3, r2, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	f47f ae78 	bne.w	8001618 <HAL_GPIO_Init+0x10>
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	48000400 	.word	0x48000400
 8001944:	48000800 	.word	0x48000800
 8001948:	48000c00 	.word	0x48000c00
 800194c:	48001000 	.word	0x48001000
 8001950:	48001400 	.word	0x48001400
 8001954:	48001800 	.word	0x48001800
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001978:	e002      	b.n	8001980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43d9      	mvns	r1, r3
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	400b      	ands	r3, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000

080019dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019ea:	d130      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f8:	d038      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a02:	4a1e      	ldr	r2, [pc, #120]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2232      	movs	r2, #50	; 0x32
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9b      	lsrs	r3, r3, #18
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a20:	e002      	b.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a34:	d102      	bne.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f2      	bne.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a48:	d110      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e00f      	b.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5a:	d007      	beq.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	20000064 	.word	0x20000064
 8001a84:	431bde83 	.word	0x431bde83

08001a88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e3ca      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9a:	4b97      	ldr	r3, [pc, #604]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa4:	4b94      	ldr	r3, [pc, #592]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80e4 	beq.w	8001c84 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4a>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	f040 808b 	bne.w	8001be0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	f040 8087 	bne.w	8001be0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad2:	4b89      	ldr	r3, [pc, #548]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d005      	beq.n	8001aea <HAL_RCC_OscConfig+0x62>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e3a2      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	4b82      	ldr	r3, [pc, #520]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <HAL_RCC_OscConfig+0x7c>
 8001afa:	4b7f      	ldr	r3, [pc, #508]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b02:	e005      	b.n	8001b10 <HAL_RCC_OscConfig+0x88>
 8001b04:	4b7c      	ldr	r3, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	091b      	lsrs	r3, r3, #4
 8001b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d223      	bcs.n	8001b5c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 fd55 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e383      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b28:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a72      	ldr	r2, [pc, #456]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	496d      	ldr	r1, [pc, #436]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b46:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	4968      	ldr	r1, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
 8001b5a:	e025      	b.n	8001ba8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5c:	4b66      	ldr	r3, [pc, #408]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a65      	ldr	r2, [pc, #404]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b62:	f043 0308 	orr.w	r3, r3, #8
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4960      	ldr	r1, [pc, #384]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	495b      	ldr	r1, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d109      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 fd15 	bl	80025c8 <RCC_SetFlashLatencyFromMSIRange>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e343      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ba8:	f000 fc4a 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b52      	ldr	r3, [pc, #328]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	4950      	ldr	r1, [pc, #320]	; (8001cfc <HAL_RCC_OscConfig+0x274>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_RCC_OscConfig+0x278>)
 8001bc6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bc8:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <HAL_RCC_OscConfig+0x27c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fb89 	bl	80012e4 <HAL_InitTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d052      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	e327      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d032      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001be8:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a42      	ldr	r2, [pc, #264]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fbc6 	bl	8001384 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fbc2 	bl	8001384 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e310      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c0e:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1a:	4b37      	ldr	r3, [pc, #220]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a36      	ldr	r2, [pc, #216]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4931      	ldr	r1, [pc, #196]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c38:	4b2f      	ldr	r3, [pc, #188]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	492c      	ldr	r1, [pc, #176]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
 8001c4c:	e01a      	b.n	8001c84 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb93 	bl	8001384 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c62:	f7ff fb8f 	bl	8001384 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e2dd      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c74:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x1da>
 8001c80:	e000      	b.n	8001c84 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c82:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d074      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x21a>
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d10e      	bne.n	8001cba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d10b      	bne.n	8001cba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d064      	beq.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d160      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e2ba      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x24a>
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e026      	b.n	8001d20 <HAL_RCC_OscConfig+0x298>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cda:	d115      	bne.n	8001d08 <HAL_RCC_OscConfig+0x280>
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a02      	ldr	r2, [pc, #8]	; (8001cf8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e014      	b.n	8001d20 <HAL_RCC_OscConfig+0x298>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08005944 	.word	0x08005944
 8001d00:	20000064 	.word	0x20000064
 8001d04:	20000068 	.word	0x20000068
 8001d08:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a9f      	ldr	r2, [pc, #636]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b9d      	ldr	r3, [pc, #628]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a9c      	ldr	r2, [pc, #624]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb2c 	bl	8001384 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d30:	f7ff fb28 	bl	8001384 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b64      	cmp	r3, #100	; 0x64
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e276      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	4b92      	ldr	r3, [pc, #584]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2a8>
 8001d4e:	e014      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fb18 	bl	8001384 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fb14 	bl	8001384 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e262      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2d0>
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d060      	beq.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_OscConfig+0x310>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d119      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d116      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d98:	4b7c      	ldr	r3, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x328>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e23f      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	4973      	ldr	r1, [pc, #460]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	e040      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d023      	beq.n	8001e16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fad3 	bl	8001384 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff facf 	bl	8001384 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e21d      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df4:	4b65      	ldr	r3, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	061b      	lsls	r3, r3, #24
 8001e0e:	495f      	ldr	r1, [pc, #380]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e018      	b.n	8001e48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b5d      	ldr	r3, [pc, #372]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff faaf 	bl	8001384 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2a:	f7ff faab 	bl	8001384 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e1f9      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3c:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d03c      	beq.n	8001ece <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5c:	4b4b      	ldr	r3, [pc, #300]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff fa8a 	bl	8001384 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fa86 	bl	8001384 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1d4      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0ef      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3ec>
 8001e94:	e01b      	b.n	8001ece <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9c:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fa6d 	bl	8001384 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eae:	f7ff fa69 	bl	8001384 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1b7      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ef      	bne.n	8001eae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80a6 	beq.w	8002028 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f08:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d118      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f14:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fa30 	bl	8001384 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7ff fa2c 	bl	8001384 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e17a      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x508>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4d8>
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5e:	e029      	b.n	8001fb4 <HAL_RCC_OscConfig+0x52c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d115      	bne.n	8001f94 <HAL_RCC_OscConfig+0x50c>
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_RCC_OscConfig+0x504>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x52c>
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
 8001f94:	4b9c      	ldr	r3, [pc, #624]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a9b      	ldr	r2, [pc, #620]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	4b98      	ldr	r3, [pc, #608]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a97      	ldr	r2, [pc, #604]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d016      	beq.n	8001fea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f9e2 	bl	8001384 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc4:	f7ff f9de 	bl	8001384 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e12a      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ed      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x53c>
 8001fe8:	e015      	b.n	8002016 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff f9cb 	bl	8001384 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7ff f9c7 	bl	8001384 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e113      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002008:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ed      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002016:	7ffb      	ldrb	r3, [r7, #31]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d105      	bne.n	8002028 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201c:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	4a79      	ldr	r2, [pc, #484]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002026:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80fe 	beq.w	800222e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	2b02      	cmp	r3, #2
 8002038:	f040 80d0 	bne.w	80021dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800203c:	4b72      	ldr	r3, [pc, #456]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	429a      	cmp	r2, r3
 800204e:	d130      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	3b01      	subs	r3, #1
 800205c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d127      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d11f      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800207c:	2a07      	cmp	r2, #7
 800207e:	bf14      	ite	ne
 8002080:	2201      	movne	r2, #1
 8002082:	2200      	moveq	r2, #0
 8002084:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002086:	4293      	cmp	r3, r2
 8002088:	d113      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	3b01      	subs	r3, #1
 80020ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d06e      	beq.n	8002190 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d069      	beq.n	800218c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020b8:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0ad      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020d4:	4b4c      	ldr	r3, [pc, #304]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a4b      	ldr	r2, [pc, #300]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e0:	f7ff f950 	bl	8001384 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff f94c 	bl	8001384 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e09a      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fa:	4b43      	ldr	r3, [pc, #268]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	4b40      	ldr	r3, [pc, #256]	; (800220c <HAL_RCC_OscConfig+0x784>)
 800210c:	4013      	ands	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002116:	3a01      	subs	r2, #1
 8002118:	0112      	lsls	r2, r2, #4
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002120:	0212      	lsls	r2, r2, #8
 8002122:	4311      	orrs	r1, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002128:	0852      	lsrs	r2, r2, #1
 800212a:	3a01      	subs	r2, #1
 800212c:	0552      	lsls	r2, r2, #21
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002134:	0852      	lsrs	r2, r2, #1
 8002136:	3a01      	subs	r2, #1
 8002138:	0652      	lsls	r2, r2, #25
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002140:	0912      	lsrs	r2, r2, #4
 8002142:	0452      	lsls	r2, r2, #17
 8002144:	430a      	orrs	r2, r1
 8002146:	4930      	ldr	r1, [pc, #192]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a2d      	ldr	r2, [pc, #180]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002162:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002164:	f7ff f90e 	bl	8001384 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff f90a 	bl	8001384 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e058      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800218a:	e050      	b.n	800222e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e04f      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d148      	bne.n	800222e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a19      	ldr	r2, [pc, #100]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021b4:	f7ff f8e6 	bl	8001384 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff f8e2 	bl	8001384 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e030      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x734>
 80021da:	e028      	b.n	800222e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d023      	beq.n	800222a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a08      	ldr	r2, [pc, #32]	; (8002208 <HAL_RCC_OscConfig+0x780>)
 80021e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ee:	f7ff f8c9 	bl	8001384 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	e00c      	b.n	8002210 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7ff f8c5 	bl	8001384 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d905      	bls.n	8002210 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e013      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
 8002208:	40021000 	.word	0x40021000
 800220c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x7b0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ec      	bne.n	80021f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_OscConfig+0x7b0>)
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4905      	ldr	r1, [pc, #20]	; (8002238 <HAL_RCC_OscConfig+0x7b0>)
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_RCC_OscConfig+0x7b4>)
 8002224:	4013      	ands	r3, r2
 8002226:	60cb      	str	r3, [r1, #12]
 8002228:	e001      	b.n	800222e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	feeefffc 	.word	0xfeeefffc

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0e7      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b75      	ldr	r3, [pc, #468]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d910      	bls.n	8002284 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b72      	ldr	r3, [pc, #456]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 0207 	bic.w	r2, r3, #7
 800226a:	4970      	ldr	r1, [pc, #448]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b6e      	ldr	r3, [pc, #440]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0cf      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	429a      	cmp	r2, r3
 800229e:	d908      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b63      	ldr	r3, [pc, #396]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4960      	ldr	r1, [pc, #384]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d04c      	beq.n	8002358 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c6:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d121      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0a6      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d107      	bne.n	80022ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022de:	4b54      	ldr	r3, [pc, #336]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e09a      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022f6:	4b4e      	ldr	r3, [pc, #312]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d109      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e08e      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e086      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002316:	4b46      	ldr	r3, [pc, #280]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f023 0203 	bic.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4943      	ldr	r1, [pc, #268]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002328:	f7ff f82c 	bl	8001384 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	e00a      	b.n	8002346 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002330:	f7ff f828 	bl	8001384 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	; 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e06e      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002346:	4b3a      	ldr	r3, [pc, #232]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 020c 	and.w	r2, r3, #12
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	429a      	cmp	r2, r3
 8002356:	d1eb      	bne.n	8002330 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d010      	beq.n	8002386 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002370:	429a      	cmp	r2, r3
 8002372:	d208      	bcs.n	8002386 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	492b      	ldr	r1, [pc, #172]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d210      	bcs.n	80023b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f023 0207 	bic.w	r2, r3, #7
 800239c:	4923      	ldr	r1, [pc, #140]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <HAL_RCC_ClockConfig+0x1ec>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e036      	b.n	8002424 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d008      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	4918      	ldr	r1, [pc, #96]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4910      	ldr	r1, [pc, #64]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f4:	f000 f824 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023f8:	4602      	mov	r2, r0
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	490b      	ldr	r1, [pc, #44]	; (8002434 <HAL_RCC_ClockConfig+0x1f4>)
 8002406:	5ccb      	ldrb	r3, [r1, r3]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
 8002410:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002412:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1fc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe ff63 	bl	80012e4 <HAL_InitTick>
 800241e:	4603      	mov	r3, r0
 8002420:	72fb      	strb	r3, [r7, #11]

  return status;
 8002422:	7afb      	ldrb	r3, [r7, #11]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40022000 	.word	0x40022000
 8002430:	40021000 	.word	0x40021000
 8002434:	08005944 	.word	0x08005944
 8002438:	20000064 	.word	0x20000064
 800243c:	20000068 	.word	0x20000068

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002458:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x34>
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d121      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11e      	bne.n	80024b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e005      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002490:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_RCC_GetSysClockFreq+0x10c>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024b0:	e00a      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d102      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ba:	61bb      	str	r3, [r7, #24]
 80024bc:	e004      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024c4:	4b23      	ldr	r3, [pc, #140]	; (8002554 <HAL_RCC_GetSysClockFreq+0x114>)
 80024c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d134      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d003      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xac>
 80024e4:	e005      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <HAL_RCC_GetSysClockFreq+0x110>)
 80024e8:	617b      	str	r3, [r7, #20]
      break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_GetSysClockFreq+0x114>)
 80024ee:	617b      	str	r3, [r7, #20]
      break;
 80024f0:	e002      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	617b      	str	r3, [r7, #20]
      break;
 80024f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	3301      	adds	r3, #1
 8002504:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	fb03 f202 	mul.w	r2, r3, r2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_GetSysClockFreq+0x108>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	0e5b      	lsrs	r3, r3, #25
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	3301      	adds	r3, #1
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002538:	69bb      	ldr	r3, [r7, #24]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	0800595c 	.word	0x0800595c
 8002550:	00f42400 	.word	0x00f42400
 8002554:	007a1200 	.word	0x007a1200

08002558 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <HAL_RCC_GetHCLKFreq+0x14>)
 800255e:	681b      	ldr	r3, [r3, #0]
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	20000064 	.word	0x20000064

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002574:	f7ff fff0 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4904      	ldr	r1, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	08005954 	.word	0x08005954

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a0:	f7ff ffda 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0adb      	lsrs	r3, r3, #11
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4904      	ldr	r1, [pc, #16]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	08005954 	.word	0x08005954

080025c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025e0:	f7ff f9ee 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 80025e4:	6178      	str	r0, [r7, #20]
 80025e6:	e014      	b.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e8:	4b25      	ldr	r3, [pc, #148]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a24      	ldr	r2, [pc, #144]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6593      	str	r3, [r2, #88]	; 0x58
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002600:	f7ff f9de 	bl	80019c0 <HAL_PWREx_GetVoltageRange>
 8002604:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	4a1d      	ldr	r2, [pc, #116]	; (8002680 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002610:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d10b      	bne.n	8002632 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d919      	bls.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2ba0      	cmp	r3, #160	; 0xa0
 8002624:	d902      	bls.n	800262c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002626:	2302      	movs	r3, #2
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	e013      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800262c:	2301      	movs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e010      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b80      	cmp	r3, #128	; 0x80
 8002636:	d902      	bls.n	800263e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002638:	2303      	movs	r3, #3
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e00a      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b80      	cmp	r3, #128	; 0x80
 8002642:	d102      	bne.n	800264a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002644:	2302      	movs	r3, #2
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	e004      	b.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b70      	cmp	r3, #112	; 0x70
 800264e:	d101      	bne.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 0207 	bic.w	r2, r3, #7
 800265c:	4909      	ldr	r1, [pc, #36]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002664:	4b07      	ldr	r3, [pc, #28]	; (8002684 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	429a      	cmp	r2, r3
 8002670:	d001      	beq.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002690:	2300      	movs	r3, #0
 8002692:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002694:	2300      	movs	r3, #0
 8002696:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d041      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026ac:	d02a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026b2:	d824      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026b8:	d008      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026be:	d81e      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c8:	d010      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026ca:	e018      	b.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026cc:	4b86      	ldr	r3, [pc, #536]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a85      	ldr	r2, [pc, #532]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d8:	e015      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	2100      	movs	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fabb 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 80026e6:	4603      	mov	r3, r0
 80026e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ea:	e00c      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3320      	adds	r3, #32
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fba6 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	74fb      	strb	r3, [r7, #19]
      break;
 8002702:	e000      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800270c:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800271a:	4973      	ldr	r1, [pc, #460]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002722:	e001      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d041      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002738:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800273c:	d02a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800273e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002742:	d824      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002748:	d008      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800274a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800274e:	d81e      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d010      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800275a:	e018      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800275c:	4b62      	ldr	r3, [pc, #392]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a61      	ldr	r2, [pc, #388]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002768:	e015      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fa73 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277a:	e00c      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3320      	adds	r3, #32
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fb5e 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800278c:	e003      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	74fb      	strb	r3, [r7, #19]
      break;
 8002792:	e000      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800279c:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027aa:	494f      	ldr	r1, [pc, #316]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a0 	beq.w	8002906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027ca:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027da:	2300      	movs	r3, #0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6593      	str	r3, [r2, #88]	; 0x58
 80027ec:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f8:	2301      	movs	r3, #1
 80027fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027fc:	4b3b      	ldr	r3, [pc, #236]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a3a      	ldr	r2, [pc, #232]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002808:	f7fe fdbc 	bl	8001384 <HAL_GetTick>
 800280c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800280e:	e009      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002810:	f7fe fdb8 	bl	8001384 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d902      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	74fb      	strb	r3, [r7, #19]
        break;
 8002822:	e005      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002824:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ef      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d15c      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002836:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002840:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01f      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	429a      	cmp	r2, r3
 8002852:	d019      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002870:	4b1d      	ldr	r3, [pc, #116]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002880:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d016      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002892:	f7fe fd77 	bl	8001384 <HAL_GetTick>
 8002896:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	e00b      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fd73 	bl	8001384 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d902      	bls.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	74fb      	strb	r3, [r7, #19]
            break;
 80028b0:	e006      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ec      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d6:	4904      	ldr	r1, [pc, #16]	; (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028de:	e009      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e0:	7cfb      	ldrb	r3, [r7, #19]
 80028e2:	74bb      	strb	r3, [r7, #18]
 80028e4:	e006      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f4:	7c7b      	ldrb	r3, [r7, #17]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4b9e      	ldr	r3, [pc, #632]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	4a9d      	ldr	r2, [pc, #628]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002912:	4b98      	ldr	r3, [pc, #608]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 0203 	bic.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	4994      	ldr	r1, [pc, #592]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002934:	4b8f      	ldr	r3, [pc, #572]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 020c 	bic.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	498c      	ldr	r1, [pc, #560]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002956:	4b87      	ldr	r3, [pc, #540]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	4983      	ldr	r1, [pc, #524]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002978:	4b7e      	ldr	r3, [pc, #504]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	497b      	ldr	r1, [pc, #492]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800299a:	4b76      	ldr	r3, [pc, #472]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a8:	4972      	ldr	r1, [pc, #456]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029bc:	4b6d      	ldr	r3, [pc, #436]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	496a      	ldr	r1, [pc, #424]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029de:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	4961      	ldr	r1, [pc, #388]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a00:	4b5c      	ldr	r3, [pc, #368]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	4959      	ldr	r1, [pc, #356]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a22:	4b54      	ldr	r3, [pc, #336]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a30:	4950      	ldr	r1, [pc, #320]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a44:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	4948      	ldr	r1, [pc, #288]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a66:	4b43      	ldr	r3, [pc, #268]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a74:	493f      	ldr	r1, [pc, #252]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d028      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a88:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a96:	4937      	ldr	r1, [pc, #220]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
 8002ab4:	e011      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002abe:	d10c      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f8c8 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002acc:	4603      	mov	r3, r0
 8002ace:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	491f      	ldr	r1, [pc, #124]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b04:	d106      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b06:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	4a1a      	ldr	r2, [pc, #104]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b10:	60d3      	str	r3, [r2, #12]
 8002b12:	e011      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f899 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d02b      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b62:	d109      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4a02      	ldr	r2, [pc, #8]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b6e:	60d3      	str	r3, [r2, #12]
 8002b70:	e014      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2101      	movs	r1, #1
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f867 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d02f      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bb6:	4928      	ldr	r1, [pc, #160]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc6:	d10d      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	2102      	movs	r1, #2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 f844 	bl	8002c5c <RCCEx_PLLSAI1_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bd8:	7cfb      	ldrb	r3, [r7, #19]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d014      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bde:	7cfb      	ldrb	r3, [r7, #19]
 8002be0:	74bb      	strb	r3, [r7, #18]
 8002be2:	e011      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3320      	adds	r3, #32
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f925 	bl	8002e44 <RCCEx_PLLSAI2_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c22:	490d      	ldr	r1, [pc, #52]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00b      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c46:	4904      	ldr	r1, [pc, #16]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000

08002c5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c6a:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0203 	and.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d10d      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
       ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c8e:	4b6c      	ldr	r3, [pc, #432]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d047      	beq.n	8002d32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	e044      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d018      	beq.n	8002ce2 <RCCEx_PLLSAI1_Config+0x86>
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d825      	bhi.n	8002d00 <RCCEx_PLLSAI1_Config+0xa4>
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d002      	beq.n	8002cbe <RCCEx_PLLSAI1_Config+0x62>
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d009      	beq.n	8002cd0 <RCCEx_PLLSAI1_Config+0x74>
 8002cbc:	e020      	b.n	8002d00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cbe:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11d      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cce:	e01a      	b.n	8002d06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cd0:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d116      	bne.n	8002d0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce0:	e013      	b.n	8002d0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ce2:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cee:	4b54      	ldr	r3, [pc, #336]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cfe:	e006      	b.n	8002d0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      break;
 8002d04:	e004      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d06:	bf00      	nop
 8002d08:	e002      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10d      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d16:	4b4a      	ldr	r3, [pc, #296]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	4944      	ldr	r1, [pc, #272]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d17d      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d38:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d44:	f7fe fb1e 	bl	8001384 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d4a:	e009      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d4c:	f7fe fb1a 	bl	8001384 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d902      	bls.n	8002d60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d5e:	e005      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1ef      	bne.n	8002d4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d160      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d111      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6892      	ldr	r2, [r2, #8]
 8002d88:	0211      	lsls	r1, r2, #8
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68d2      	ldr	r2, [r2, #12]
 8002d8e:	0912      	lsrs	r2, r2, #4
 8002d90:	0452      	lsls	r2, r2, #17
 8002d92:	430a      	orrs	r2, r1
 8002d94:	492a      	ldr	r1, [pc, #168]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	610b      	str	r3, [r1, #16]
 8002d9a:	e027      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d112      	bne.n	8002dc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002daa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6892      	ldr	r2, [r2, #8]
 8002db2:	0211      	lsls	r1, r2, #8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6912      	ldr	r2, [r2, #16]
 8002db8:	0852      	lsrs	r2, r2, #1
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	0552      	lsls	r2, r2, #21
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	491f      	ldr	r1, [pc, #124]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]
 8002dc6:	e011      	b.n	8002dec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6892      	ldr	r2, [r2, #8]
 8002dd8:	0211      	lsls	r1, r2, #8
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6952      	ldr	r2, [r2, #20]
 8002dde:	0852      	lsrs	r2, r2, #1
 8002de0:	3a01      	subs	r2, #1
 8002de2:	0652      	lsls	r2, r2, #25
 8002de4:	430a      	orrs	r2, r1
 8002de6:	4916      	ldr	r1, [pc, #88]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe fac4 	bl	8001384 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dfe:	e009      	b.n	8002e14 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e00:	f7fe fac0 	bl	8001384 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d902      	bls.n	8002e14 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	73fb      	strb	r3, [r7, #15]
          break;
 8002e12:	e005      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0ef      	beq.n	8002e00 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000

08002e44 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e52:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d018      	beq.n	8002e90 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0203 	and.w	r2, r3, #3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d10d      	bne.n	8002e8a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
       ||
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e76:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
       ||
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d047      	beq.n	8002f1a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
 8002e8e:	e044      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d018      	beq.n	8002eca <RCCEx_PLLSAI2_Config+0x86>
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d825      	bhi.n	8002ee8 <RCCEx_PLLSAI2_Config+0xa4>
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d002      	beq.n	8002ea6 <RCCEx_PLLSAI2_Config+0x62>
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d009      	beq.n	8002eb8 <RCCEx_PLLSAI2_Config+0x74>
 8002ea4:	e020      	b.n	8002ee8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ea6:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11d      	bne.n	8002eee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb6:	e01a      	b.n	8002eee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d116      	bne.n	8002ef2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec8:	e013      	b.n	8002ef2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eca:	4b4c      	ldr	r3, [pc, #304]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ed6:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ee6:	e006      	b.n	8002ef6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      break;
 8002eec:	e004      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e002      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ef2:	bf00      	nop
 8002ef4:	e000      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ef6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10d      	bne.n	8002f1a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002efe:	4b3f      	ldr	r3, [pc, #252]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	430b      	orrs	r3, r1
 8002f14:	4939      	ldr	r1, [pc, #228]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d167      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a35      	ldr	r2, [pc, #212]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fa2a 	bl	8001384 <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f32:	e009      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f34:	f7fe fa26 	bl	8001384 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d902      	bls.n	8002f48 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	73fb      	strb	r3, [r7, #15]
        break;
 8002f46:	e005      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ef      	bne.n	8002f34 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d14a      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f60:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	0211      	lsls	r1, r2, #8
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	0912      	lsrs	r2, r2, #4
 8002f78:	0452      	lsls	r2, r2, #17
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	491f      	ldr	r1, [pc, #124]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	614b      	str	r3, [r1, #20]
 8002f82:	e011      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6892      	ldr	r2, [r2, #8]
 8002f94:	0211      	lsls	r1, r2, #8
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6912      	ldr	r2, [r2, #16]
 8002f9a:	0852      	lsrs	r2, r2, #1
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	0652      	lsls	r2, r2, #25
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	4916      	ldr	r1, [pc, #88]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fa8:	4b14      	ldr	r3, [pc, #80]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe f9e6 	bl	8001384 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fba:	e009      	b.n	8002fd0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fbc:	f7fe f9e2 	bl	8001384 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d902      	bls.n	8002fd0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002fce:	e005      	b.n	8002fdc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	4904      	ldr	r1, [pc, #16]	; (8002ffc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000

08003000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e095      	b.n	800313e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d108      	bne.n	800302c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003022:	d009      	beq.n	8003038 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
 800302a:	e005      	b.n	8003038 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd ffc4 	bl	8000fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800306e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003078:	d902      	bls.n	8003080 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	e002      	b.n	8003086 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003084:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800308e:	d007      	beq.n	80030a0 <HAL_SPI_Init+0xa0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003098:	d002      	beq.n	80030a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e2:	ea42 0103 	orr.w	r1, r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	0c1b      	lsrs	r3, r3, #16
 80030fc:	f003 0204 	and.w	r2, r3, #4
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800311c:	ea42 0103 	orr.w	r1, r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b088      	sub	sp, #32
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	603b      	str	r3, [r7, #0]
 8003152:	4613      	mov	r3, r2
 8003154:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_SPI_Transmit+0x22>
 8003164:	2302      	movs	r3, #2
 8003166:	e158      	b.n	800341a <HAL_SPI_Transmit+0x2d4>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003170:	f7fe f908 	bl	8001384 <HAL_GetTick>
 8003174:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d002      	beq.n	800318c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003186:	2302      	movs	r3, #2
 8003188:	77fb      	strb	r3, [r7, #31]
    goto error;
 800318a:	e13d      	b.n	8003408 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_SPI_Transmit+0x52>
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800319c:	e134      	b.n	8003408 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	88fa      	ldrh	r2, [r7, #6]
 80031b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e8:	d10f      	bne.n	800320a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003208:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003214:	2b40      	cmp	r3, #64	; 0x40
 8003216:	d007      	beq.n	8003228 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003230:	d94b      	bls.n	80032ca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_SPI_Transmit+0xfa>
 800323a:	8afb      	ldrh	r3, [r7, #22]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d13e      	bne.n	80032be <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003244:	881a      	ldrh	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003264:	e02b      	b.n	80032be <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d112      	bne.n	800329a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	881a      	ldrh	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	1c9a      	adds	r2, r3, #2
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003298:	e011      	b.n	80032be <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329a:	f7fe f873 	bl	8001384 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d803      	bhi.n	80032b2 <HAL_SPI_Transmit+0x16c>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b0:	d102      	bne.n	80032b8 <HAL_SPI_Transmit+0x172>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032bc:	e0a4      	b.n	8003408 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ce      	bne.n	8003266 <HAL_SPI_Transmit+0x120>
 80032c8:	e07c      	b.n	80033c4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_SPI_Transmit+0x192>
 80032d2:	8afb      	ldrh	r3, [r7, #22]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d170      	bne.n	80033ba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d912      	bls.n	8003308 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	881a      	ldrh	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b02      	subs	r3, #2
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003306:	e058      	b.n	80033ba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	330c      	adds	r3, #12
 8003312:	7812      	ldrb	r2, [r2, #0]
 8003314:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800332e:	e044      	b.n	80033ba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d12b      	bne.n	8003396 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	d912      	bls.n	800336e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b02      	subs	r3, #2
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800336c:	e025      	b.n	80033ba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	330c      	adds	r3, #12
 8003378:	7812      	ldrb	r2, [r2, #0]
 800337a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003394:	e011      	b.n	80033ba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003396:	f7fd fff5 	bl	8001384 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d803      	bhi.n	80033ae <HAL_SPI_Transmit+0x268>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ac:	d102      	bne.n	80033b4 <HAL_SPI_Transmit+0x26e>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033b8:	e026      	b.n	8003408 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1b5      	bne.n	8003330 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	6839      	ldr	r1, [r7, #0]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fcf1 	bl	8003db0 <SPI_EndRxTxTransaction>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	613b      	str	r3, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	77fb      	strb	r3, [r7, #31]
 8003404:	e000      	b.n	8003408 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003406:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003418:	7ffb      	ldrb	r3, [r7, #31]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b088      	sub	sp, #32
 8003426:	af02      	add	r7, sp, #8
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	603b      	str	r3, [r7, #0]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343e:	d112      	bne.n	8003466 <HAL_SPI_Receive+0x44>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10e      	bne.n	8003466 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2204      	movs	r2, #4
 800344c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	4613      	mov	r3, r2
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f910 	bl	8003682 <HAL_SPI_TransmitReceive>
 8003462:	4603      	mov	r3, r0
 8003464:	e109      	b.n	800367a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_SPI_Receive+0x52>
 8003470:	2302      	movs	r3, #2
 8003472:	e102      	b.n	800367a <HAL_SPI_Receive+0x258>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800347c:	f7fd ff82 	bl	8001384 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	d002      	beq.n	8003494 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800348e:	2302      	movs	r3, #2
 8003490:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003492:	e0e9      	b.n	8003668 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_SPI_Receive+0x7e>
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034a4:	e0e0      	b.n	8003668 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2204      	movs	r2, #4
 80034aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034f0:	d908      	bls.n	8003504 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	e007      	b.n	8003514 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003512:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800351c:	d10f      	bne.n	800353e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800353c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	d007      	beq.n	800355c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003564:	d867      	bhi.n	8003636 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003566:	e030      	b.n	80035ca <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d117      	bne.n	80035a6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f103 020c 	add.w	r2, r3, #12
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80035a4:	e011      	b.n	80035ca <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035a6:	f7fd feed 	bl	8001384 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d803      	bhi.n	80035be <HAL_SPI_Receive+0x19c>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035bc:	d102      	bne.n	80035c4 <HAL_SPI_Receive+0x1a2>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035c8:	e04e      	b.n	8003668 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1c8      	bne.n	8003568 <HAL_SPI_Receive+0x146>
 80035d6:	e034      	b.n	8003642 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d115      	bne.n	8003612 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	b292      	uxth	r2, r2
 80035f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003610:	e011      	b.n	8003636 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003612:	f7fd feb7 	bl	8001384 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d803      	bhi.n	800362a <HAL_SPI_Receive+0x208>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003628:	d102      	bne.n	8003630 <HAL_SPI_Receive+0x20e>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003634:	e018      	b.n	8003668 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ca      	bne.n	80035d8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	6839      	ldr	r1, [r7, #0]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fb5a 	bl	8003d00 <SPI_EndRxTransaction>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	75fb      	strb	r3, [r7, #23]
 8003664:	e000      	b.n	8003668 <HAL_SPI_Receive+0x246>
  }

error :
 8003666:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003678:	7dfb      	ldrb	r3, [r7, #23]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b08a      	sub	sp, #40	; 0x28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003690:	2301      	movs	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_SPI_TransmitReceive+0x26>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e1fb      	b.n	8003aa0 <HAL_SPI_TransmitReceive+0x41e>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036b0:	f7fd fe68 	bl	8001384 <HAL_GetTick>
 80036b4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80036bc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80036c8:	887b      	ldrh	r3, [r7, #2]
 80036ca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036cc:	7efb      	ldrb	r3, [r7, #27]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d00e      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x6e>
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d8:	d106      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0x66>
 80036e2:	7efb      	ldrb	r3, [r7, #27]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d003      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80036ee:	e1cd      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d005      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x80>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x80>
 80036fc:	887b      	ldrh	r3, [r7, #2]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d103      	bne.n	800370a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003708:	e1c0      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b04      	cmp	r3, #4
 8003714:	d003      	beq.n	800371e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2205      	movs	r2, #5
 800371a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	887a      	ldrh	r2, [r7, #2]
 800372e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	887a      	ldrh	r2, [r7, #2]
 800374a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003760:	d802      	bhi.n	8003768 <HAL_SPI_TransmitReceive+0xe6>
 8003762:	8a3b      	ldrh	r3, [r7, #16]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d908      	bls.n	800377a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	e007      	b.n	800378a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003788:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b40      	cmp	r3, #64	; 0x40
 8003796:	d007      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037b0:	d97c      	bls.n	80038ac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_TransmitReceive+0x13e>
 80037ba:	8a7b      	ldrh	r3, [r7, #18]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d169      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037e4:	e056      	b.n	8003894 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d11b      	bne.n	800382c <HAL_SPI_TransmitReceive+0x1aa>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_SPI_TransmitReceive+0x1aa>
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	2b01      	cmp	r3, #1
 8003802:	d113      	bne.n	800382c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d11c      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x1f2>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d016      	beq.n	8003874 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	b292      	uxth	r2, r2
 8003852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	1c9a      	adds	r2, r3, #2
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003870:	2301      	movs	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003874:	f7fd fd86 	bl	8001384 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003880:	429a      	cmp	r2, r3
 8003882:	d807      	bhi.n	8003894 <HAL_SPI_TransmitReceive+0x212>
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388a:	d003      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003892:	e0fb      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1a3      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x164>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d19d      	bne.n	80037e6 <HAL_SPI_TransmitReceive+0x164>
 80038aa:	e0df      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x23a>
 80038b4:	8a7b      	ldrh	r3, [r7, #18]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	f040 80cb 	bne.w	8003a52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d912      	bls.n	80038ec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	1c9a      	adds	r2, r3, #2
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b02      	subs	r3, #2
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038ea:	e0b2      	b.n	8003a52 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	7812      	ldrb	r2, [r2, #0]
 80038f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003912:	e09e      	b.n	8003a52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d134      	bne.n	800398c <HAL_SPI_TransmitReceive+0x30a>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d02f      	beq.n	800398c <HAL_SPI_TransmitReceive+0x30a>
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	2b01      	cmp	r3, #1
 8003930:	d12c      	bne.n	800398c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d912      	bls.n	8003962 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003940:	881a      	ldrh	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	1c9a      	adds	r2, r3, #2
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b02      	subs	r3, #2
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003960:	e012      	b.n	8003988 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	7812      	ldrb	r2, [r2, #0]
 800396e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d148      	bne.n	8003a2c <HAL_SPI_TransmitReceive+0x3aa>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d042      	beq.n	8003a2c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d923      	bls.n	80039fa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	b292      	uxth	r2, r2
 80039be:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	1c9a      	adds	r2, r3, #2
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b02      	subs	r3, #2
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d81f      	bhi.n	8003a28 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039f6:	605a      	str	r2, [r3, #4]
 80039f8:	e016      	b.n	8003a28 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f103 020c 	add.w	r2, r3, #12
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a2c:	f7fd fcaa 	bl	8001384 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d803      	bhi.n	8003a44 <HAL_SPI_TransmitReceive+0x3c2>
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a42:	d102      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x3c8>
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d103      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a50:	e01c      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f47f af5b 	bne.w	8003914 <HAL_SPI_TransmitReceive+0x292>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f47f af54 	bne.w	8003914 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f99d 	bl	8003db0 <SPI_EndRxTxTransaction>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d006      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	661a      	str	r2, [r3, #96]	; 0x60
 8003a88:	e000      	b.n	8003a8c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003a8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3728      	adds	r7, #40	; 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ab6:	b2db      	uxtb	r3, r3
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ad4:	f7fd fc56 	bl	8001384 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ae4:	f7fd fc4e 	bl	8001384 <HAL_GetTick>
 8003ae8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aea:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	015b      	lsls	r3, r3, #5
 8003af0:	0d1b      	lsrs	r3, r3, #20
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	fb02 f303 	mul.w	r3, r2, r3
 8003af8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003afa:	e054      	b.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b02:	d050      	beq.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b04:	f7fd fc3e 	bl	8001384 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d902      	bls.n	8003b1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d13d      	bne.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b32:	d111      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d004      	beq.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b46:	d107      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b60:	d10f      	bne.n	8003b82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e017      	b.n	8003bc6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d19b      	bne.n	8003afc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000064 	.word	0x20000064

08003bd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	; 0x28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003be6:	f7fd fbcd 	bl	8001384 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003bf6:	f7fd fbc5 	bl	8001384 <HAL_GetTick>
 8003bfa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c04:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	00da      	lsls	r2, r3, #3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	0d1b      	lsrs	r3, r3, #20
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c1c:	e060      	b.n	8003ce0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c24:	d107      	bne.n	8003c36 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d104      	bne.n	8003c36 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3c:	d050      	beq.n	8003ce0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c3e:	f7fd fba1 	bl	8001384 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d902      	bls.n	8003c54 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13d      	bne.n	8003cd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c6c:	d111      	bne.n	8003c92 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c76:	d004      	beq.n	8003c82 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c80:	d107      	bne.n	8003c92 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9a:	d10f      	bne.n	8003cbc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e010      	b.n	8003cf2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d196      	bne.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3728      	adds	r7, #40	; 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000064 	.word	0x20000064

08003d00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d14:	d111      	bne.n	8003d3a <SPI_EndRxTransaction+0x3a>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1e:	d004      	beq.n	8003d2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d28:	d107      	bne.n	8003d3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2180      	movs	r1, #128	; 0x80
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff febd 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e023      	b.n	8003da8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d68:	d11d      	bne.n	8003da6 <SPI_EndRxTransaction+0xa6>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d72:	d004      	beq.n	8003d7e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7c:	d113      	bne.n	8003da6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff ff22 	bl	8003bd4 <SPI_WaitFifoStateUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	f043 0220 	orr.w	r2, r3, #32
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e000      	b.n	8003da8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff ff03 	bl	8003bd4 <SPI_WaitFifoStateUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d007      	beq.n	8003de4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e027      	b.n	8003e34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2200      	movs	r2, #0
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff fe68 	bl	8003ac4 <SPI_WaitFlagStateUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e014      	b.n	8003e34 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e16:	68f8      	ldr	r0, [r7, #12]
 8003e18:	f7ff fedc 	bl	8003bd4 <SPI_WaitFifoStateUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e26:	f043 0220 	orr.w	r2, r3, #32
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e000      	b.n	8003e34 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e049      	b.n	8003ee2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fd f8fe 	bl	8001064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f000 f9ee 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d001      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e04f      	b.n	8003fa4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a23      	ldr	r2, [pc, #140]	; (8003fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01d      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2e:	d018      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_TIM_Base_Start_IT+0x76>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d115      	bne.n	8003f8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	4b17      	ldr	r3, [pc, #92]	; (8003fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	d015      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d011      	beq.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8c:	e008      	b.n	8003fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e000      	b.n	8003fa2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	40012c00 	.word	0x40012c00
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40013400 	.word	0x40013400
 8003fc4:	40014000 	.word	0x40014000
 8003fc8:	00010007 	.word	0x00010007

08003fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d122      	bne.n	8004028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d11b      	bne.n	8004028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0202 	mvn.w	r2, #2
 8003ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f905 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8f7 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f908 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b04      	cmp	r3, #4
 8004034:	d122      	bne.n	800407c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d11b      	bne.n	800407c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0204 	mvn.w	r2, #4
 800404c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2202      	movs	r2, #2
 8004052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f8db 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8cd 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8de 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b08      	cmp	r3, #8
 8004088:	d122      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b08      	cmp	r3, #8
 8004096:	d11b      	bne.n	80040d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0208 	mvn.w	r2, #8
 80040a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2204      	movs	r2, #4
 80040a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8b1 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 80040bc:	e005      	b.n	80040ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8a3 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8b4 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b10      	cmp	r3, #16
 80040dc:	d122      	bne.n	8004124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d11b      	bne.n	8004124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0210 	mvn.w	r2, #16
 80040f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2208      	movs	r2, #8
 80040fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f887 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8004110:	e005      	b.n	800411e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f879 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f88a 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10e      	bne.n	8004150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f06f 0201 	mvn.w	r2, #1
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fdc4 	bl	8000cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d10e      	bne.n	800417c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d107      	bne.n	800417c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f99c 	bl	80044b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800418a:	d10e      	bne.n	80041aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d107      	bne.n	80041aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f98f 	bl	80044c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d10e      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d107      	bne.n	80041d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f838 	bl	8004246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d10e      	bne.n	8004202 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d107      	bne.n	8004202 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f06f 0220 	mvn.w	r2, #32
 80041fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f94f 	bl	80044a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a40      	ldr	r2, [pc, #256]	; (8004370 <TIM_Base_SetConfig+0x114>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800427a:	d00f      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a3d      	ldr	r2, [pc, #244]	; (8004374 <TIM_Base_SetConfig+0x118>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00b      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a3c      	ldr	r2, [pc, #240]	; (8004378 <TIM_Base_SetConfig+0x11c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d007      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a3b      	ldr	r2, [pc, #236]	; (800437c <TIM_Base_SetConfig+0x120>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d003      	beq.n	800429c <TIM_Base_SetConfig+0x40>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a3a      	ldr	r2, [pc, #232]	; (8004380 <TIM_Base_SetConfig+0x124>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d108      	bne.n	80042ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2f      	ldr	r2, [pc, #188]	; (8004370 <TIM_Base_SetConfig+0x114>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01f      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d01b      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a2c      	ldr	r2, [pc, #176]	; (8004374 <TIM_Base_SetConfig+0x118>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d017      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a2b      	ldr	r2, [pc, #172]	; (8004378 <TIM_Base_SetConfig+0x11c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d013      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a2a      	ldr	r2, [pc, #168]	; (800437c <TIM_Base_SetConfig+0x120>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00f      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a29      	ldr	r2, [pc, #164]	; (8004380 <TIM_Base_SetConfig+0x124>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00b      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a28      	ldr	r2, [pc, #160]	; (8004384 <TIM_Base_SetConfig+0x128>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a27      	ldr	r2, [pc, #156]	; (8004388 <TIM_Base_SetConfig+0x12c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d003      	beq.n	80042f6 <TIM_Base_SetConfig+0x9a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a26      	ldr	r2, [pc, #152]	; (800438c <TIM_Base_SetConfig+0x130>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d108      	bne.n	8004308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	4313      	orrs	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a10      	ldr	r2, [pc, #64]	; (8004370 <TIM_Base_SetConfig+0x114>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00f      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <TIM_Base_SetConfig+0x124>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00b      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a11      	ldr	r2, [pc, #68]	; (8004384 <TIM_Base_SetConfig+0x128>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a10      	ldr	r2, [pc, #64]	; (8004388 <TIM_Base_SetConfig+0x12c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_Base_SetConfig+0xf8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a0f      	ldr	r2, [pc, #60]	; (800438c <TIM_Base_SetConfig+0x130>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d103      	bne.n	800435c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	691a      	ldr	r2, [r3, #16]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	615a      	str	r2, [r3, #20]
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40013400 	.word	0x40013400
 8004384:	40014000 	.word	0x40014000
 8004388:	40014400 	.word	0x40014400
 800438c:	40014800 	.word	0x40014800

08004390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e068      	b.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2e      	ldr	r2, [pc, #184]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d004      	beq.n	80043dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2d      	ldr	r2, [pc, #180]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1e      	ldr	r2, [pc, #120]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01d      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d018      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1b      	ldr	r2, [pc, #108]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a18      	ldr	r2, [pc, #96]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a13      	ldr	r2, [pc, #76]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a14      	ldr	r2, [pc, #80]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10c      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4313      	orrs	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40014000 	.word	0x40014000

080044a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e040      	b.n	8004570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fc fdd6 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	; 0x24
 8004508:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8c0 	bl	80046a0 <UART_SetConfig>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e022      	b.n	8004570 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fb6c 	bl	8004c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fbf3 	bl	8004d54 <UART_CheckIdleState>
 800456e:	4603      	mov	r3, r0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800458c:	2b20      	cmp	r3, #32
 800458e:	f040 8082 	bne.w	8004696 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_UART_Transmit+0x26>
 8004598:	88fb      	ldrh	r3, [r7, #6]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e07a      	b.n	8004698 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_UART_Transmit+0x38>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e073      	b.n	8004698 <HAL_UART_Transmit+0x120>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2221      	movs	r2, #33	; 0x21
 80045c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045c6:	f7fc fedd 	bl	8001384 <HAL_GetTick>
 80045ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	88fa      	ldrh	r2, [r7, #6]
 80045d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Transmit+0x80>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004608:	e02d      	b.n	8004666 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fbe6 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e039      	b.n	8004698 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	881a      	ldrh	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004636:	b292      	uxth	r2, r2
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3302      	adds	r3, #2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e008      	b.n	8004654 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	b292      	uxth	r2, r2
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3301      	adds	r3, #1
 8004652:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1cb      	bne.n	800460a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2140      	movs	r1, #64	; 0x40
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fbb2 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e005      	b.n	8004698 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	e000      	b.n	8004698 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004696:	2302      	movs	r3, #2
  }
}
 8004698:	4618      	mov	r0, r3
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a4:	b08a      	sub	sp, #40	; 0x28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4ba4      	ldr	r3, [pc, #656]	; (8004960 <UART_SetConfig+0x2c0>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046d8:	430b      	orrs	r3, r1
 80046da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a99      	ldr	r2, [pc, #612]	; (8004964 <UART_SetConfig+0x2c4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d004      	beq.n	800470c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004708:	4313      	orrs	r3, r2
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a90      	ldr	r2, [pc, #576]	; (8004968 <UART_SetConfig+0x2c8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d126      	bne.n	8004778 <UART_SetConfig+0xd8>
 800472a:	4b90      	ldr	r3, [pc, #576]	; (800496c <UART_SetConfig+0x2cc>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b03      	cmp	r3, #3
 8004736:	d81b      	bhi.n	8004770 <UART_SetConfig+0xd0>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <UART_SetConfig+0xa0>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004751 	.word	0x08004751
 8004744:	08004761 	.word	0x08004761
 8004748:	08004759 	.word	0x08004759
 800474c:	08004769 	.word	0x08004769
 8004750:	2301      	movs	r3, #1
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e116      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004758:	2302      	movs	r3, #2
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800475e:	e112      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004760:	2304      	movs	r3, #4
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e10e      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004768:	2308      	movs	r3, #8
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e10a      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004770:	2310      	movs	r3, #16
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e106      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a7c      	ldr	r2, [pc, #496]	; (8004970 <UART_SetConfig+0x2d0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d138      	bne.n	80047f4 <UART_SetConfig+0x154>
 8004782:	4b7a      	ldr	r3, [pc, #488]	; (800496c <UART_SetConfig+0x2cc>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	f003 030c 	and.w	r3, r3, #12
 800478c:	2b0c      	cmp	r3, #12
 800478e:	d82d      	bhi.n	80047ec <UART_SetConfig+0x14c>
 8004790:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <UART_SetConfig+0xf8>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047cd 	.word	0x080047cd
 800479c:	080047ed 	.word	0x080047ed
 80047a0:	080047ed 	.word	0x080047ed
 80047a4:	080047ed 	.word	0x080047ed
 80047a8:	080047dd 	.word	0x080047dd
 80047ac:	080047ed 	.word	0x080047ed
 80047b0:	080047ed 	.word	0x080047ed
 80047b4:	080047ed 	.word	0x080047ed
 80047b8:	080047d5 	.word	0x080047d5
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	080047ed 	.word	0x080047ed
 80047c4:	080047ed 	.word	0x080047ed
 80047c8:	080047e5 	.word	0x080047e5
 80047cc:	2300      	movs	r3, #0
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d2:	e0d8      	b.n	8004986 <UART_SetConfig+0x2e6>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047da:	e0d4      	b.n	8004986 <UART_SetConfig+0x2e6>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e0d0      	b.n	8004986 <UART_SetConfig+0x2e6>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e0cc      	b.n	8004986 <UART_SetConfig+0x2e6>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e0c8      	b.n	8004986 <UART_SetConfig+0x2e6>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a5e      	ldr	r2, [pc, #376]	; (8004974 <UART_SetConfig+0x2d4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d125      	bne.n	800484a <UART_SetConfig+0x1aa>
 80047fe:	4b5b      	ldr	r3, [pc, #364]	; (800496c <UART_SetConfig+0x2cc>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004808:	2b30      	cmp	r3, #48	; 0x30
 800480a:	d016      	beq.n	800483a <UART_SetConfig+0x19a>
 800480c:	2b30      	cmp	r3, #48	; 0x30
 800480e:	d818      	bhi.n	8004842 <UART_SetConfig+0x1a2>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d00a      	beq.n	800482a <UART_SetConfig+0x18a>
 8004814:	2b20      	cmp	r3, #32
 8004816:	d814      	bhi.n	8004842 <UART_SetConfig+0x1a2>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <UART_SetConfig+0x182>
 800481c:	2b10      	cmp	r3, #16
 800481e:	d008      	beq.n	8004832 <UART_SetConfig+0x192>
 8004820:	e00f      	b.n	8004842 <UART_SetConfig+0x1a2>
 8004822:	2300      	movs	r3, #0
 8004824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004828:	e0ad      	b.n	8004986 <UART_SetConfig+0x2e6>
 800482a:	2302      	movs	r3, #2
 800482c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004830:	e0a9      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004832:	2304      	movs	r3, #4
 8004834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004838:	e0a5      	b.n	8004986 <UART_SetConfig+0x2e6>
 800483a:	2308      	movs	r3, #8
 800483c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004840:	e0a1      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004842:	2310      	movs	r3, #16
 8004844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004848:	e09d      	b.n	8004986 <UART_SetConfig+0x2e6>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a4a      	ldr	r2, [pc, #296]	; (8004978 <UART_SetConfig+0x2d8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d125      	bne.n	80048a0 <UART_SetConfig+0x200>
 8004854:	4b45      	ldr	r3, [pc, #276]	; (800496c <UART_SetConfig+0x2cc>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800485e:	2bc0      	cmp	r3, #192	; 0xc0
 8004860:	d016      	beq.n	8004890 <UART_SetConfig+0x1f0>
 8004862:	2bc0      	cmp	r3, #192	; 0xc0
 8004864:	d818      	bhi.n	8004898 <UART_SetConfig+0x1f8>
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d00a      	beq.n	8004880 <UART_SetConfig+0x1e0>
 800486a:	2b80      	cmp	r3, #128	; 0x80
 800486c:	d814      	bhi.n	8004898 <UART_SetConfig+0x1f8>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <UART_SetConfig+0x1d8>
 8004872:	2b40      	cmp	r3, #64	; 0x40
 8004874:	d008      	beq.n	8004888 <UART_SetConfig+0x1e8>
 8004876:	e00f      	b.n	8004898 <UART_SetConfig+0x1f8>
 8004878:	2300      	movs	r3, #0
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487e:	e082      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004880:	2302      	movs	r3, #2
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004886:	e07e      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004888:	2304      	movs	r3, #4
 800488a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488e:	e07a      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004890:	2308      	movs	r3, #8
 8004892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004896:	e076      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004898:	2310      	movs	r3, #16
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800489e:	e072      	b.n	8004986 <UART_SetConfig+0x2e6>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a35      	ldr	r2, [pc, #212]	; (800497c <UART_SetConfig+0x2dc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d12a      	bne.n	8004900 <UART_SetConfig+0x260>
 80048aa:	4b30      	ldr	r3, [pc, #192]	; (800496c <UART_SetConfig+0x2cc>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b8:	d01a      	beq.n	80048f0 <UART_SetConfig+0x250>
 80048ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048be:	d81b      	bhi.n	80048f8 <UART_SetConfig+0x258>
 80048c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c4:	d00c      	beq.n	80048e0 <UART_SetConfig+0x240>
 80048c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ca:	d815      	bhi.n	80048f8 <UART_SetConfig+0x258>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <UART_SetConfig+0x238>
 80048d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d4:	d008      	beq.n	80048e8 <UART_SetConfig+0x248>
 80048d6:	e00f      	b.n	80048f8 <UART_SetConfig+0x258>
 80048d8:	2300      	movs	r3, #0
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048de:	e052      	b.n	8004986 <UART_SetConfig+0x2e6>
 80048e0:	2302      	movs	r3, #2
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e6:	e04e      	b.n	8004986 <UART_SetConfig+0x2e6>
 80048e8:	2304      	movs	r3, #4
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e04a      	b.n	8004986 <UART_SetConfig+0x2e6>
 80048f0:	2308      	movs	r3, #8
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e046      	b.n	8004986 <UART_SetConfig+0x2e6>
 80048f8:	2310      	movs	r3, #16
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e042      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a17      	ldr	r2, [pc, #92]	; (8004964 <UART_SetConfig+0x2c4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d13a      	bne.n	8004980 <UART_SetConfig+0x2e0>
 800490a:	4b18      	ldr	r3, [pc, #96]	; (800496c <UART_SetConfig+0x2cc>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004914:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004918:	d01a      	beq.n	8004950 <UART_SetConfig+0x2b0>
 800491a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491e:	d81b      	bhi.n	8004958 <UART_SetConfig+0x2b8>
 8004920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004924:	d00c      	beq.n	8004940 <UART_SetConfig+0x2a0>
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492a:	d815      	bhi.n	8004958 <UART_SetConfig+0x2b8>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <UART_SetConfig+0x298>
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d008      	beq.n	8004948 <UART_SetConfig+0x2a8>
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x2b8>
 8004938:	2300      	movs	r3, #0
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800493e:	e022      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004940:	2302      	movs	r3, #2
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004946:	e01e      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004948:	2304      	movs	r3, #4
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494e:	e01a      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004950:	2308      	movs	r3, #8
 8004952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004956:	e016      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004958:	2310      	movs	r3, #16
 800495a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495e:	e012      	b.n	8004986 <UART_SetConfig+0x2e6>
 8004960:	efff69f3 	.word	0xefff69f3
 8004964:	40008000 	.word	0x40008000
 8004968:	40013800 	.word	0x40013800
 800496c:	40021000 	.word	0x40021000
 8004970:	40004400 	.word	0x40004400
 8004974:	40004800 	.word	0x40004800
 8004978:	40004c00 	.word	0x40004c00
 800497c:	40005000 	.word	0x40005000
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a9f      	ldr	r2, [pc, #636]	; (8004c08 <UART_SetConfig+0x568>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d17a      	bne.n	8004a86 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004990:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004994:	2b08      	cmp	r3, #8
 8004996:	d824      	bhi.n	80049e2 <UART_SetConfig+0x342>
 8004998:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0x300>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049d3 	.word	0x080049d3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049e3 	.word	0x080049e3
 80049bc:	080049e3 	.word	0x080049e3
 80049c0:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7fd fdd4 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 80049c8:	61f8      	str	r0, [r7, #28]
        break;
 80049ca:	e010      	b.n	80049ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b8f      	ldr	r3, [pc, #572]	; (8004c0c <UART_SetConfig+0x56c>)
 80049ce:	61fb      	str	r3, [r7, #28]
        break;
 80049d0:	e00d      	b.n	80049ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7fd fd35 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80049d6:	61f8      	str	r0, [r7, #28]
        break;
 80049d8:	e009      	b.n	80049ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	61fb      	str	r3, [r7, #28]
        break;
 80049e0:	e005      	b.n	80049ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80049ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80fb 	beq.w	8004bec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	4413      	add	r3, r2
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d305      	bcc.n	8004a12 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d903      	bls.n	8004a1a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a18:	e0e8      	b.n	8004bec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	461c      	mov	r4, r3
 8004a20:	4615      	mov	r5, r2
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	022b      	lsls	r3, r5, #8
 8004a2c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a30:	0222      	lsls	r2, r4, #8
 8004a32:	68f9      	ldr	r1, [r7, #12]
 8004a34:	6849      	ldr	r1, [r1, #4]
 8004a36:	0849      	lsrs	r1, r1, #1
 8004a38:	2000      	movs	r0, #0
 8004a3a:	4688      	mov	r8, r1
 8004a3c:	4681      	mov	r9, r0
 8004a3e:	eb12 0a08 	adds.w	sl, r2, r8
 8004a42:	eb43 0b09 	adc.w	fp, r3, r9
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a54:	4650      	mov	r0, sl
 8004a56:	4659      	mov	r1, fp
 8004a58:	f7fb fc12 	bl	8000280 <__aeabi_uldivmod>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4613      	mov	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6a:	d308      	bcc.n	8004a7e <UART_SetConfig+0x3de>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a72:	d204      	bcs.n	8004a7e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	60da      	str	r2, [r3, #12]
 8004a7c:	e0b6      	b.n	8004bec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a84:	e0b2      	b.n	8004bec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8e:	d15e      	bne.n	8004b4e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d828      	bhi.n	8004aea <UART_SetConfig+0x44a>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0x400>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ac5 	.word	0x08004ac5
 8004aa4:	08004acd 	.word	0x08004acd
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004aeb 	.word	0x08004aeb
 8004ab0:	08004adb 	.word	0x08004adb
 8004ab4:	08004aeb 	.word	0x08004aeb
 8004ab8:	08004aeb 	.word	0x08004aeb
 8004abc:	08004aeb 	.word	0x08004aeb
 8004ac0:	08004ae3 	.word	0x08004ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac4:	f7fd fd54 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8004ac8:	61f8      	str	r0, [r7, #28]
        break;
 8004aca:	e014      	b.n	8004af6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004acc:	f7fd fd66 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8004ad0:	61f8      	str	r0, [r7, #28]
        break;
 8004ad2:	e010      	b.n	8004af6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad4:	4b4d      	ldr	r3, [pc, #308]	; (8004c0c <UART_SetConfig+0x56c>)
 8004ad6:	61fb      	str	r3, [r7, #28]
        break;
 8004ad8:	e00d      	b.n	8004af6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ada:	f7fd fcb1 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8004ade:	61f8      	str	r0, [r7, #28]
        break;
 8004ae0:	e009      	b.n	8004af6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae6:	61fb      	str	r3, [r7, #28]
        break;
 8004ae8:	e005      	b.n	8004af6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004af4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d077      	beq.n	8004bec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	005a      	lsls	r2, r3, #1
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	441a      	add	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b10:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b0f      	cmp	r3, #15
 8004b16:	d916      	bls.n	8004b46 <UART_SetConfig+0x4a6>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d212      	bcs.n	8004b46 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f023 030f 	bic.w	r3, r3, #15
 8004b28:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	8afb      	ldrh	r3, [r7, #22]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	8afa      	ldrh	r2, [r7, #22]
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	e052      	b.n	8004bec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b4c:	e04e      	b.n	8004bec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d827      	bhi.n	8004ba6 <UART_SetConfig+0x506>
 8004b56:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0x4bc>)
 8004b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	08004ba7 	.word	0x08004ba7
 8004b6c:	08004b97 	.word	0x08004b97
 8004b70:	08004ba7 	.word	0x08004ba7
 8004b74:	08004ba7 	.word	0x08004ba7
 8004b78:	08004ba7 	.word	0x08004ba7
 8004b7c:	08004b9f 	.word	0x08004b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b80:	f7fd fcf6 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8004b84:	61f8      	str	r0, [r7, #28]
        break;
 8004b86:	e014      	b.n	8004bb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b88:	f7fd fd08 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8004b8c:	61f8      	str	r0, [r7, #28]
        break;
 8004b8e:	e010      	b.n	8004bb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <UART_SetConfig+0x56c>)
 8004b92:	61fb      	str	r3, [r7, #28]
        break;
 8004b94:	e00d      	b.n	8004bb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b96:	f7fd fc53 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8004b9a:	61f8      	str	r0, [r7, #28]
        break;
 8004b9c:	e009      	b.n	8004bb2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba2:	61fb      	str	r3, [r7, #28]
        break;
 8004ba4:	e005      	b.n	8004bb2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d019      	beq.n	8004bec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	085a      	lsrs	r2, r3, #1
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	441a      	add	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b0f      	cmp	r3, #15
 8004bd0:	d909      	bls.n	8004be6 <UART_SetConfig+0x546>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d205      	bcs.n	8004be6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60da      	str	r2, [r3, #12]
 8004be4:	e002      	b.n	8004bec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bf8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3728      	adds	r7, #40	; 0x28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c06:	bf00      	nop
 8004c08:	40008000 	.word	0x40008000
 8004c0c:	00f42400 	.word	0x00f42400

08004c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01a      	beq.n	8004d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0e:	d10a      	bne.n	8004d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d64:	f7fc fb0e 	bl	8001384 <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d10e      	bne.n	8004d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f82d 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e023      	b.n	8004dde <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b04      	cmp	r3, #4
 8004da2:	d10e      	bne.n	8004dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f817 	bl	8004de6 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e00d      	b.n	8004dde <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b09c      	sub	sp, #112	; 0x70
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	603b      	str	r3, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df6:	e0a5      	b.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfe:	f000 80a1 	beq.w	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e02:	f7fc fabf 	bl	8001384 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d302      	bcc.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d13e      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	461a      	mov	r2, r3
 8004e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e38:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e3e:	e841 2300 	strex	r3, r2, [r1]
 8004e42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1e6      	bne.n	8004e18 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	663b      	str	r3, [r7, #96]	; 0x60
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e067      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d04f      	beq.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb2:	d147      	bne.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ebc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ede:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e6      	bne.n	8004ebe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	e853 3f00 	ldrex	r3, [r3]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 0301 	bic.w	r3, r3, #1
 8004f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f10:	623a      	str	r2, [r7, #32]
 8004f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69f9      	ldr	r1, [r7, #28]
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e5      	bne.n	8004ef0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2220      	movs	r2, #32
 8004f28:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e010      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	bf0c      	ite	eq
 8004f54:	2301      	moveq	r3, #1
 8004f56:	2300      	movne	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	f43f af4a 	beq.w	8004df8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3770      	adds	r7, #112	; 0x70
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <__errno>:
 8004f70:	4b01      	ldr	r3, [pc, #4]	; (8004f78 <__errno+0x8>)
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000070 	.word	0x20000070

08004f7c <__libc_init_array>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	4d0d      	ldr	r5, [pc, #52]	; (8004fb4 <__libc_init_array+0x38>)
 8004f80:	4c0d      	ldr	r4, [pc, #52]	; (8004fb8 <__libc_init_array+0x3c>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	2600      	movs	r6, #0
 8004f88:	42a6      	cmp	r6, r4
 8004f8a:	d109      	bne.n	8004fa0 <__libc_init_array+0x24>
 8004f8c:	4d0b      	ldr	r5, [pc, #44]	; (8004fbc <__libc_init_array+0x40>)
 8004f8e:	4c0c      	ldr	r4, [pc, #48]	; (8004fc0 <__libc_init_array+0x44>)
 8004f90:	f000 fc8e 	bl	80058b0 <_init>
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	2600      	movs	r6, #0
 8004f9a:	42a6      	cmp	r6, r4
 8004f9c:	d105      	bne.n	8004faa <__libc_init_array+0x2e>
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa4:	4798      	blx	r3
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7ee      	b.n	8004f88 <__libc_init_array+0xc>
 8004faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fae:	4798      	blx	r3
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	e7f2      	b.n	8004f9a <__libc_init_array+0x1e>
 8004fb4:	080059c8 	.word	0x080059c8
 8004fb8:	080059c8 	.word	0x080059c8
 8004fbc:	080059c8 	.word	0x080059c8
 8004fc0:	080059cc 	.word	0x080059cc

08004fc4 <memset>:
 8004fc4:	4402      	add	r2, r0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d100      	bne.n	8004fce <memset+0xa>
 8004fcc:	4770      	bx	lr
 8004fce:	f803 1b01 	strb.w	r1, [r3], #1
 8004fd2:	e7f9      	b.n	8004fc8 <memset+0x4>

08004fd4 <siprintf>:
 8004fd4:	b40e      	push	{r1, r2, r3}
 8004fd6:	b500      	push	{lr}
 8004fd8:	b09c      	sub	sp, #112	; 0x70
 8004fda:	ab1d      	add	r3, sp, #116	; 0x74
 8004fdc:	9002      	str	r0, [sp, #8]
 8004fde:	9006      	str	r0, [sp, #24]
 8004fe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fe4:	4809      	ldr	r0, [pc, #36]	; (800500c <siprintf+0x38>)
 8004fe6:	9107      	str	r1, [sp, #28]
 8004fe8:	9104      	str	r1, [sp, #16]
 8004fea:	4909      	ldr	r1, [pc, #36]	; (8005010 <siprintf+0x3c>)
 8004fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ff0:	9105      	str	r1, [sp, #20]
 8004ff2:	6800      	ldr	r0, [r0, #0]
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	a902      	add	r1, sp, #8
 8004ff8:	f000 f868 	bl	80050cc <_svfiprintf_r>
 8004ffc:	9b02      	ldr	r3, [sp, #8]
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	b01c      	add	sp, #112	; 0x70
 8005004:	f85d eb04 	ldr.w	lr, [sp], #4
 8005008:	b003      	add	sp, #12
 800500a:	4770      	bx	lr
 800500c:	20000070 	.word	0x20000070
 8005010:	ffff0208 	.word	0xffff0208

08005014 <__ssputs_r>:
 8005014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005018:	688e      	ldr	r6, [r1, #8]
 800501a:	429e      	cmp	r6, r3
 800501c:	4682      	mov	sl, r0
 800501e:	460c      	mov	r4, r1
 8005020:	4690      	mov	r8, r2
 8005022:	461f      	mov	r7, r3
 8005024:	d838      	bhi.n	8005098 <__ssputs_r+0x84>
 8005026:	898a      	ldrh	r2, [r1, #12]
 8005028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800502c:	d032      	beq.n	8005094 <__ssputs_r+0x80>
 800502e:	6825      	ldr	r5, [r4, #0]
 8005030:	6909      	ldr	r1, [r1, #16]
 8005032:	eba5 0901 	sub.w	r9, r5, r1
 8005036:	6965      	ldr	r5, [r4, #20]
 8005038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800503c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005040:	3301      	adds	r3, #1
 8005042:	444b      	add	r3, r9
 8005044:	106d      	asrs	r5, r5, #1
 8005046:	429d      	cmp	r5, r3
 8005048:	bf38      	it	cc
 800504a:	461d      	movcc	r5, r3
 800504c:	0553      	lsls	r3, r2, #21
 800504e:	d531      	bpl.n	80050b4 <__ssputs_r+0xa0>
 8005050:	4629      	mov	r1, r5
 8005052:	f000 fb63 	bl	800571c <_malloc_r>
 8005056:	4606      	mov	r6, r0
 8005058:	b950      	cbnz	r0, 8005070 <__ssputs_r+0x5c>
 800505a:	230c      	movs	r3, #12
 800505c:	f8ca 3000 	str.w	r3, [sl]
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005066:	81a3      	strh	r3, [r4, #12]
 8005068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	6921      	ldr	r1, [r4, #16]
 8005072:	464a      	mov	r2, r9
 8005074:	f000 fabe 	bl	80055f4 <memcpy>
 8005078:	89a3      	ldrh	r3, [r4, #12]
 800507a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800507e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	6126      	str	r6, [r4, #16]
 8005086:	6165      	str	r5, [r4, #20]
 8005088:	444e      	add	r6, r9
 800508a:	eba5 0509 	sub.w	r5, r5, r9
 800508e:	6026      	str	r6, [r4, #0]
 8005090:	60a5      	str	r5, [r4, #8]
 8005092:	463e      	mov	r6, r7
 8005094:	42be      	cmp	r6, r7
 8005096:	d900      	bls.n	800509a <__ssputs_r+0x86>
 8005098:	463e      	mov	r6, r7
 800509a:	6820      	ldr	r0, [r4, #0]
 800509c:	4632      	mov	r2, r6
 800509e:	4641      	mov	r1, r8
 80050a0:	f000 fab6 	bl	8005610 <memmove>
 80050a4:	68a3      	ldr	r3, [r4, #8]
 80050a6:	1b9b      	subs	r3, r3, r6
 80050a8:	60a3      	str	r3, [r4, #8]
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	4433      	add	r3, r6
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	2000      	movs	r0, #0
 80050b2:	e7db      	b.n	800506c <__ssputs_r+0x58>
 80050b4:	462a      	mov	r2, r5
 80050b6:	f000 fba5 	bl	8005804 <_realloc_r>
 80050ba:	4606      	mov	r6, r0
 80050bc:	2800      	cmp	r0, #0
 80050be:	d1e1      	bne.n	8005084 <__ssputs_r+0x70>
 80050c0:	6921      	ldr	r1, [r4, #16]
 80050c2:	4650      	mov	r0, sl
 80050c4:	f000 fabe 	bl	8005644 <_free_r>
 80050c8:	e7c7      	b.n	800505a <__ssputs_r+0x46>
	...

080050cc <_svfiprintf_r>:
 80050cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d0:	4698      	mov	r8, r3
 80050d2:	898b      	ldrh	r3, [r1, #12]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	b09d      	sub	sp, #116	; 0x74
 80050d8:	4607      	mov	r7, r0
 80050da:	460d      	mov	r5, r1
 80050dc:	4614      	mov	r4, r2
 80050de:	d50e      	bpl.n	80050fe <_svfiprintf_r+0x32>
 80050e0:	690b      	ldr	r3, [r1, #16]
 80050e2:	b963      	cbnz	r3, 80050fe <_svfiprintf_r+0x32>
 80050e4:	2140      	movs	r1, #64	; 0x40
 80050e6:	f000 fb19 	bl	800571c <_malloc_r>
 80050ea:	6028      	str	r0, [r5, #0]
 80050ec:	6128      	str	r0, [r5, #16]
 80050ee:	b920      	cbnz	r0, 80050fa <_svfiprintf_r+0x2e>
 80050f0:	230c      	movs	r3, #12
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f8:	e0d1      	b.n	800529e <_svfiprintf_r+0x1d2>
 80050fa:	2340      	movs	r3, #64	; 0x40
 80050fc:	616b      	str	r3, [r5, #20]
 80050fe:	2300      	movs	r3, #0
 8005100:	9309      	str	r3, [sp, #36]	; 0x24
 8005102:	2320      	movs	r3, #32
 8005104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005108:	f8cd 800c 	str.w	r8, [sp, #12]
 800510c:	2330      	movs	r3, #48	; 0x30
 800510e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80052b8 <_svfiprintf_r+0x1ec>
 8005112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005116:	f04f 0901 	mov.w	r9, #1
 800511a:	4623      	mov	r3, r4
 800511c:	469a      	mov	sl, r3
 800511e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005122:	b10a      	cbz	r2, 8005128 <_svfiprintf_r+0x5c>
 8005124:	2a25      	cmp	r2, #37	; 0x25
 8005126:	d1f9      	bne.n	800511c <_svfiprintf_r+0x50>
 8005128:	ebba 0b04 	subs.w	fp, sl, r4
 800512c:	d00b      	beq.n	8005146 <_svfiprintf_r+0x7a>
 800512e:	465b      	mov	r3, fp
 8005130:	4622      	mov	r2, r4
 8005132:	4629      	mov	r1, r5
 8005134:	4638      	mov	r0, r7
 8005136:	f7ff ff6d 	bl	8005014 <__ssputs_r>
 800513a:	3001      	adds	r0, #1
 800513c:	f000 80aa 	beq.w	8005294 <_svfiprintf_r+0x1c8>
 8005140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005142:	445a      	add	r2, fp
 8005144:	9209      	str	r2, [sp, #36]	; 0x24
 8005146:	f89a 3000 	ldrb.w	r3, [sl]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 80a2 	beq.w	8005294 <_svfiprintf_r+0x1c8>
 8005150:	2300      	movs	r3, #0
 8005152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800515a:	f10a 0a01 	add.w	sl, sl, #1
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	9307      	str	r3, [sp, #28]
 8005162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005166:	931a      	str	r3, [sp, #104]	; 0x68
 8005168:	4654      	mov	r4, sl
 800516a:	2205      	movs	r2, #5
 800516c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005170:	4851      	ldr	r0, [pc, #324]	; (80052b8 <_svfiprintf_r+0x1ec>)
 8005172:	f7fb f835 	bl	80001e0 <memchr>
 8005176:	9a04      	ldr	r2, [sp, #16]
 8005178:	b9d8      	cbnz	r0, 80051b2 <_svfiprintf_r+0xe6>
 800517a:	06d0      	lsls	r0, r2, #27
 800517c:	bf44      	itt	mi
 800517e:	2320      	movmi	r3, #32
 8005180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005184:	0711      	lsls	r1, r2, #28
 8005186:	bf44      	itt	mi
 8005188:	232b      	movmi	r3, #43	; 0x2b
 800518a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800518e:	f89a 3000 	ldrb.w	r3, [sl]
 8005192:	2b2a      	cmp	r3, #42	; 0x2a
 8005194:	d015      	beq.n	80051c2 <_svfiprintf_r+0xf6>
 8005196:	9a07      	ldr	r2, [sp, #28]
 8005198:	4654      	mov	r4, sl
 800519a:	2000      	movs	r0, #0
 800519c:	f04f 0c0a 	mov.w	ip, #10
 80051a0:	4621      	mov	r1, r4
 80051a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051a6:	3b30      	subs	r3, #48	; 0x30
 80051a8:	2b09      	cmp	r3, #9
 80051aa:	d94e      	bls.n	800524a <_svfiprintf_r+0x17e>
 80051ac:	b1b0      	cbz	r0, 80051dc <_svfiprintf_r+0x110>
 80051ae:	9207      	str	r2, [sp, #28]
 80051b0:	e014      	b.n	80051dc <_svfiprintf_r+0x110>
 80051b2:	eba0 0308 	sub.w	r3, r0, r8
 80051b6:	fa09 f303 	lsl.w	r3, r9, r3
 80051ba:	4313      	orrs	r3, r2
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	46a2      	mov	sl, r4
 80051c0:	e7d2      	b.n	8005168 <_svfiprintf_r+0x9c>
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	1d19      	adds	r1, r3, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	9103      	str	r1, [sp, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfbb      	ittet	lt
 80051ce:	425b      	neglt	r3, r3
 80051d0:	f042 0202 	orrlt.w	r2, r2, #2
 80051d4:	9307      	strge	r3, [sp, #28]
 80051d6:	9307      	strlt	r3, [sp, #28]
 80051d8:	bfb8      	it	lt
 80051da:	9204      	strlt	r2, [sp, #16]
 80051dc:	7823      	ldrb	r3, [r4, #0]
 80051de:	2b2e      	cmp	r3, #46	; 0x2e
 80051e0:	d10c      	bne.n	80051fc <_svfiprintf_r+0x130>
 80051e2:	7863      	ldrb	r3, [r4, #1]
 80051e4:	2b2a      	cmp	r3, #42	; 0x2a
 80051e6:	d135      	bne.n	8005254 <_svfiprintf_r+0x188>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	1d1a      	adds	r2, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9203      	str	r2, [sp, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfb8      	it	lt
 80051f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051f8:	3402      	adds	r4, #2
 80051fa:	9305      	str	r3, [sp, #20]
 80051fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80052c8 <_svfiprintf_r+0x1fc>
 8005200:	7821      	ldrb	r1, [r4, #0]
 8005202:	2203      	movs	r2, #3
 8005204:	4650      	mov	r0, sl
 8005206:	f7fa ffeb 	bl	80001e0 <memchr>
 800520a:	b140      	cbz	r0, 800521e <_svfiprintf_r+0x152>
 800520c:	2340      	movs	r3, #64	; 0x40
 800520e:	eba0 000a 	sub.w	r0, r0, sl
 8005212:	fa03 f000 	lsl.w	r0, r3, r0
 8005216:	9b04      	ldr	r3, [sp, #16]
 8005218:	4303      	orrs	r3, r0
 800521a:	3401      	adds	r4, #1
 800521c:	9304      	str	r3, [sp, #16]
 800521e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005222:	4826      	ldr	r0, [pc, #152]	; (80052bc <_svfiprintf_r+0x1f0>)
 8005224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005228:	2206      	movs	r2, #6
 800522a:	f7fa ffd9 	bl	80001e0 <memchr>
 800522e:	2800      	cmp	r0, #0
 8005230:	d038      	beq.n	80052a4 <_svfiprintf_r+0x1d8>
 8005232:	4b23      	ldr	r3, [pc, #140]	; (80052c0 <_svfiprintf_r+0x1f4>)
 8005234:	bb1b      	cbnz	r3, 800527e <_svfiprintf_r+0x1b2>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	3307      	adds	r3, #7
 800523a:	f023 0307 	bic.w	r3, r3, #7
 800523e:	3308      	adds	r3, #8
 8005240:	9303      	str	r3, [sp, #12]
 8005242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005244:	4433      	add	r3, r6
 8005246:	9309      	str	r3, [sp, #36]	; 0x24
 8005248:	e767      	b.n	800511a <_svfiprintf_r+0x4e>
 800524a:	fb0c 3202 	mla	r2, ip, r2, r3
 800524e:	460c      	mov	r4, r1
 8005250:	2001      	movs	r0, #1
 8005252:	e7a5      	b.n	80051a0 <_svfiprintf_r+0xd4>
 8005254:	2300      	movs	r3, #0
 8005256:	3401      	adds	r4, #1
 8005258:	9305      	str	r3, [sp, #20]
 800525a:	4619      	mov	r1, r3
 800525c:	f04f 0c0a 	mov.w	ip, #10
 8005260:	4620      	mov	r0, r4
 8005262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005266:	3a30      	subs	r2, #48	; 0x30
 8005268:	2a09      	cmp	r2, #9
 800526a:	d903      	bls.n	8005274 <_svfiprintf_r+0x1a8>
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0c5      	beq.n	80051fc <_svfiprintf_r+0x130>
 8005270:	9105      	str	r1, [sp, #20]
 8005272:	e7c3      	b.n	80051fc <_svfiprintf_r+0x130>
 8005274:	fb0c 2101 	mla	r1, ip, r1, r2
 8005278:	4604      	mov	r4, r0
 800527a:	2301      	movs	r3, #1
 800527c:	e7f0      	b.n	8005260 <_svfiprintf_r+0x194>
 800527e:	ab03      	add	r3, sp, #12
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	462a      	mov	r2, r5
 8005284:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <_svfiprintf_r+0x1f8>)
 8005286:	a904      	add	r1, sp, #16
 8005288:	4638      	mov	r0, r7
 800528a:	f3af 8000 	nop.w
 800528e:	1c42      	adds	r2, r0, #1
 8005290:	4606      	mov	r6, r0
 8005292:	d1d6      	bne.n	8005242 <_svfiprintf_r+0x176>
 8005294:	89ab      	ldrh	r3, [r5, #12]
 8005296:	065b      	lsls	r3, r3, #25
 8005298:	f53f af2c 	bmi.w	80050f4 <_svfiprintf_r+0x28>
 800529c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800529e:	b01d      	add	sp, #116	; 0x74
 80052a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	462a      	mov	r2, r5
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <_svfiprintf_r+0x1f8>)
 80052ac:	a904      	add	r1, sp, #16
 80052ae:	4638      	mov	r0, r7
 80052b0:	f000 f87a 	bl	80053a8 <_printf_i>
 80052b4:	e7eb      	b.n	800528e <_svfiprintf_r+0x1c2>
 80052b6:	bf00      	nop
 80052b8:	0800598c 	.word	0x0800598c
 80052bc:	08005996 	.word	0x08005996
 80052c0:	00000000 	.word	0x00000000
 80052c4:	08005015 	.word	0x08005015
 80052c8:	08005992 	.word	0x08005992

080052cc <_printf_common>:
 80052cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	4616      	mov	r6, r2
 80052d2:	4699      	mov	r9, r3
 80052d4:	688a      	ldr	r2, [r1, #8]
 80052d6:	690b      	ldr	r3, [r1, #16]
 80052d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052dc:	4293      	cmp	r3, r2
 80052de:	bfb8      	it	lt
 80052e0:	4613      	movlt	r3, r2
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052e8:	4607      	mov	r7, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	b10a      	cbz	r2, 80052f2 <_printf_common+0x26>
 80052ee:	3301      	adds	r3, #1
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	0699      	lsls	r1, r3, #26
 80052f6:	bf42      	ittt	mi
 80052f8:	6833      	ldrmi	r3, [r6, #0]
 80052fa:	3302      	addmi	r3, #2
 80052fc:	6033      	strmi	r3, [r6, #0]
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	f015 0506 	ands.w	r5, r5, #6
 8005304:	d106      	bne.n	8005314 <_printf_common+0x48>
 8005306:	f104 0a19 	add.w	sl, r4, #25
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	6832      	ldr	r2, [r6, #0]
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	42ab      	cmp	r3, r5
 8005312:	dc26      	bgt.n	8005362 <_printf_common+0x96>
 8005314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005318:	1e13      	subs	r3, r2, #0
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	bf18      	it	ne
 800531e:	2301      	movne	r3, #1
 8005320:	0692      	lsls	r2, r2, #26
 8005322:	d42b      	bmi.n	800537c <_printf_common+0xb0>
 8005324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005328:	4649      	mov	r1, r9
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d01e      	beq.n	8005370 <_printf_common+0xa4>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	68e5      	ldr	r5, [r4, #12]
 8005336:	6832      	ldr	r2, [r6, #0]
 8005338:	f003 0306 	and.w	r3, r3, #6
 800533c:	2b04      	cmp	r3, #4
 800533e:	bf08      	it	eq
 8005340:	1aad      	subeq	r5, r5, r2
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	6922      	ldr	r2, [r4, #16]
 8005346:	bf0c      	ite	eq
 8005348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800534c:	2500      	movne	r5, #0
 800534e:	4293      	cmp	r3, r2
 8005350:	bfc4      	itt	gt
 8005352:	1a9b      	subgt	r3, r3, r2
 8005354:	18ed      	addgt	r5, r5, r3
 8005356:	2600      	movs	r6, #0
 8005358:	341a      	adds	r4, #26
 800535a:	42b5      	cmp	r5, r6
 800535c:	d11a      	bne.n	8005394 <_printf_common+0xc8>
 800535e:	2000      	movs	r0, #0
 8005360:	e008      	b.n	8005374 <_printf_common+0xa8>
 8005362:	2301      	movs	r3, #1
 8005364:	4652      	mov	r2, sl
 8005366:	4649      	mov	r1, r9
 8005368:	4638      	mov	r0, r7
 800536a:	47c0      	blx	r8
 800536c:	3001      	adds	r0, #1
 800536e:	d103      	bne.n	8005378 <_printf_common+0xac>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	3501      	adds	r5, #1
 800537a:	e7c6      	b.n	800530a <_printf_common+0x3e>
 800537c:	18e1      	adds	r1, r4, r3
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	2030      	movs	r0, #48	; 0x30
 8005382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005386:	4422      	add	r2, r4
 8005388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800538c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005390:	3302      	adds	r3, #2
 8005392:	e7c7      	b.n	8005324 <_printf_common+0x58>
 8005394:	2301      	movs	r3, #1
 8005396:	4622      	mov	r2, r4
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d0e6      	beq.n	8005370 <_printf_common+0xa4>
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7d9      	b.n	800535a <_printf_common+0x8e>
	...

080053a8 <_printf_i>:
 80053a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	7e0f      	ldrb	r7, [r1, #24]
 80053ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053b0:	2f78      	cmp	r7, #120	; 0x78
 80053b2:	4691      	mov	r9, r2
 80053b4:	4680      	mov	r8, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	469a      	mov	sl, r3
 80053ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053be:	d807      	bhi.n	80053d0 <_printf_i+0x28>
 80053c0:	2f62      	cmp	r7, #98	; 0x62
 80053c2:	d80a      	bhi.n	80053da <_printf_i+0x32>
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	f000 80d8 	beq.w	800557a <_printf_i+0x1d2>
 80053ca:	2f58      	cmp	r7, #88	; 0x58
 80053cc:	f000 80a3 	beq.w	8005516 <_printf_i+0x16e>
 80053d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053d8:	e03a      	b.n	8005450 <_printf_i+0xa8>
 80053da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053de:	2b15      	cmp	r3, #21
 80053e0:	d8f6      	bhi.n	80053d0 <_printf_i+0x28>
 80053e2:	a101      	add	r1, pc, #4	; (adr r1, 80053e8 <_printf_i+0x40>)
 80053e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005455 	.word	0x08005455
 80053f0:	080053d1 	.word	0x080053d1
 80053f4:	080053d1 	.word	0x080053d1
 80053f8:	080053d1 	.word	0x080053d1
 80053fc:	080053d1 	.word	0x080053d1
 8005400:	08005455 	.word	0x08005455
 8005404:	080053d1 	.word	0x080053d1
 8005408:	080053d1 	.word	0x080053d1
 800540c:	080053d1 	.word	0x080053d1
 8005410:	080053d1 	.word	0x080053d1
 8005414:	08005561 	.word	0x08005561
 8005418:	08005485 	.word	0x08005485
 800541c:	08005543 	.word	0x08005543
 8005420:	080053d1 	.word	0x080053d1
 8005424:	080053d1 	.word	0x080053d1
 8005428:	08005583 	.word	0x08005583
 800542c:	080053d1 	.word	0x080053d1
 8005430:	08005485 	.word	0x08005485
 8005434:	080053d1 	.word	0x080053d1
 8005438:	080053d1 	.word	0x080053d1
 800543c:	0800554b 	.word	0x0800554b
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	602a      	str	r2, [r5, #0]
 8005448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800544c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005450:	2301      	movs	r3, #1
 8005452:	e0a3      	b.n	800559c <_printf_i+0x1f4>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	6829      	ldr	r1, [r5, #0]
 8005458:	0606      	lsls	r6, r0, #24
 800545a:	f101 0304 	add.w	r3, r1, #4
 800545e:	d50a      	bpl.n	8005476 <_printf_i+0xce>
 8005460:	680e      	ldr	r6, [r1, #0]
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	2e00      	cmp	r6, #0
 8005466:	da03      	bge.n	8005470 <_printf_i+0xc8>
 8005468:	232d      	movs	r3, #45	; 0x2d
 800546a:	4276      	negs	r6, r6
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	485e      	ldr	r0, [pc, #376]	; (80055ec <_printf_i+0x244>)
 8005472:	230a      	movs	r3, #10
 8005474:	e019      	b.n	80054aa <_printf_i+0x102>
 8005476:	680e      	ldr	r6, [r1, #0]
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800547e:	bf18      	it	ne
 8005480:	b236      	sxthne	r6, r6
 8005482:	e7ef      	b.n	8005464 <_printf_i+0xbc>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	6029      	str	r1, [r5, #0]
 800548c:	0601      	lsls	r1, r0, #24
 800548e:	d501      	bpl.n	8005494 <_printf_i+0xec>
 8005490:	681e      	ldr	r6, [r3, #0]
 8005492:	e002      	b.n	800549a <_printf_i+0xf2>
 8005494:	0646      	lsls	r6, r0, #25
 8005496:	d5fb      	bpl.n	8005490 <_printf_i+0xe8>
 8005498:	881e      	ldrh	r6, [r3, #0]
 800549a:	4854      	ldr	r0, [pc, #336]	; (80055ec <_printf_i+0x244>)
 800549c:	2f6f      	cmp	r7, #111	; 0x6f
 800549e:	bf0c      	ite	eq
 80054a0:	2308      	moveq	r3, #8
 80054a2:	230a      	movne	r3, #10
 80054a4:	2100      	movs	r1, #0
 80054a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054aa:	6865      	ldr	r5, [r4, #4]
 80054ac:	60a5      	str	r5, [r4, #8]
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	bfa2      	ittt	ge
 80054b2:	6821      	ldrge	r1, [r4, #0]
 80054b4:	f021 0104 	bicge.w	r1, r1, #4
 80054b8:	6021      	strge	r1, [r4, #0]
 80054ba:	b90e      	cbnz	r6, 80054c0 <_printf_i+0x118>
 80054bc:	2d00      	cmp	r5, #0
 80054be:	d04d      	beq.n	800555c <_printf_i+0x1b4>
 80054c0:	4615      	mov	r5, r2
 80054c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80054c6:	fb03 6711 	mls	r7, r3, r1, r6
 80054ca:	5dc7      	ldrb	r7, [r0, r7]
 80054cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054d0:	4637      	mov	r7, r6
 80054d2:	42bb      	cmp	r3, r7
 80054d4:	460e      	mov	r6, r1
 80054d6:	d9f4      	bls.n	80054c2 <_printf_i+0x11a>
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d10b      	bne.n	80054f4 <_printf_i+0x14c>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	07de      	lsls	r6, r3, #31
 80054e0:	d508      	bpl.n	80054f4 <_printf_i+0x14c>
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	4299      	cmp	r1, r3
 80054e8:	bfde      	ittt	le
 80054ea:	2330      	movle	r3, #48	; 0x30
 80054ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054f4:	1b52      	subs	r2, r2, r5
 80054f6:	6122      	str	r2, [r4, #16]
 80054f8:	f8cd a000 	str.w	sl, [sp]
 80054fc:	464b      	mov	r3, r9
 80054fe:	aa03      	add	r2, sp, #12
 8005500:	4621      	mov	r1, r4
 8005502:	4640      	mov	r0, r8
 8005504:	f7ff fee2 	bl	80052cc <_printf_common>
 8005508:	3001      	adds	r0, #1
 800550a:	d14c      	bne.n	80055a6 <_printf_i+0x1fe>
 800550c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005510:	b004      	add	sp, #16
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	4835      	ldr	r0, [pc, #212]	; (80055ec <_printf_i+0x244>)
 8005518:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800551c:	6829      	ldr	r1, [r5, #0]
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	f851 6b04 	ldr.w	r6, [r1], #4
 8005524:	6029      	str	r1, [r5, #0]
 8005526:	061d      	lsls	r5, r3, #24
 8005528:	d514      	bpl.n	8005554 <_printf_i+0x1ac>
 800552a:	07df      	lsls	r7, r3, #31
 800552c:	bf44      	itt	mi
 800552e:	f043 0320 	orrmi.w	r3, r3, #32
 8005532:	6023      	strmi	r3, [r4, #0]
 8005534:	b91e      	cbnz	r6, 800553e <_printf_i+0x196>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	f023 0320 	bic.w	r3, r3, #32
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	2310      	movs	r3, #16
 8005540:	e7b0      	b.n	80054a4 <_printf_i+0xfc>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	f043 0320 	orr.w	r3, r3, #32
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	2378      	movs	r3, #120	; 0x78
 800554c:	4828      	ldr	r0, [pc, #160]	; (80055f0 <_printf_i+0x248>)
 800554e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005552:	e7e3      	b.n	800551c <_printf_i+0x174>
 8005554:	0659      	lsls	r1, r3, #25
 8005556:	bf48      	it	mi
 8005558:	b2b6      	uxthmi	r6, r6
 800555a:	e7e6      	b.n	800552a <_printf_i+0x182>
 800555c:	4615      	mov	r5, r2
 800555e:	e7bb      	b.n	80054d8 <_printf_i+0x130>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	6826      	ldr	r6, [r4, #0]
 8005564:	6961      	ldr	r1, [r4, #20]
 8005566:	1d18      	adds	r0, r3, #4
 8005568:	6028      	str	r0, [r5, #0]
 800556a:	0635      	lsls	r5, r6, #24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	d501      	bpl.n	8005574 <_printf_i+0x1cc>
 8005570:	6019      	str	r1, [r3, #0]
 8005572:	e002      	b.n	800557a <_printf_i+0x1d2>
 8005574:	0670      	lsls	r0, r6, #25
 8005576:	d5fb      	bpl.n	8005570 <_printf_i+0x1c8>
 8005578:	8019      	strh	r1, [r3, #0]
 800557a:	2300      	movs	r3, #0
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	4615      	mov	r5, r2
 8005580:	e7ba      	b.n	80054f8 <_printf_i+0x150>
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	602a      	str	r2, [r5, #0]
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	6862      	ldr	r2, [r4, #4]
 800558c:	2100      	movs	r1, #0
 800558e:	4628      	mov	r0, r5
 8005590:	f7fa fe26 	bl	80001e0 <memchr>
 8005594:	b108      	cbz	r0, 800559a <_printf_i+0x1f2>
 8005596:	1b40      	subs	r0, r0, r5
 8005598:	6060      	str	r0, [r4, #4]
 800559a:	6863      	ldr	r3, [r4, #4]
 800559c:	6123      	str	r3, [r4, #16]
 800559e:	2300      	movs	r3, #0
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	e7a8      	b.n	80054f8 <_printf_i+0x150>
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	462a      	mov	r2, r5
 80055aa:	4649      	mov	r1, r9
 80055ac:	4640      	mov	r0, r8
 80055ae:	47d0      	blx	sl
 80055b0:	3001      	adds	r0, #1
 80055b2:	d0ab      	beq.n	800550c <_printf_i+0x164>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	079b      	lsls	r3, r3, #30
 80055b8:	d413      	bmi.n	80055e2 <_printf_i+0x23a>
 80055ba:	68e0      	ldr	r0, [r4, #12]
 80055bc:	9b03      	ldr	r3, [sp, #12]
 80055be:	4298      	cmp	r0, r3
 80055c0:	bfb8      	it	lt
 80055c2:	4618      	movlt	r0, r3
 80055c4:	e7a4      	b.n	8005510 <_printf_i+0x168>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4632      	mov	r2, r6
 80055ca:	4649      	mov	r1, r9
 80055cc:	4640      	mov	r0, r8
 80055ce:	47d0      	blx	sl
 80055d0:	3001      	adds	r0, #1
 80055d2:	d09b      	beq.n	800550c <_printf_i+0x164>
 80055d4:	3501      	adds	r5, #1
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	9903      	ldr	r1, [sp, #12]
 80055da:	1a5b      	subs	r3, r3, r1
 80055dc:	42ab      	cmp	r3, r5
 80055de:	dcf2      	bgt.n	80055c6 <_printf_i+0x21e>
 80055e0:	e7eb      	b.n	80055ba <_printf_i+0x212>
 80055e2:	2500      	movs	r5, #0
 80055e4:	f104 0619 	add.w	r6, r4, #25
 80055e8:	e7f5      	b.n	80055d6 <_printf_i+0x22e>
 80055ea:	bf00      	nop
 80055ec:	0800599d 	.word	0x0800599d
 80055f0:	080059ae 	.word	0x080059ae

080055f4 <memcpy>:
 80055f4:	440a      	add	r2, r1
 80055f6:	4291      	cmp	r1, r2
 80055f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80055fc:	d100      	bne.n	8005600 <memcpy+0xc>
 80055fe:	4770      	bx	lr
 8005600:	b510      	push	{r4, lr}
 8005602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800560a:	4291      	cmp	r1, r2
 800560c:	d1f9      	bne.n	8005602 <memcpy+0xe>
 800560e:	bd10      	pop	{r4, pc}

08005610 <memmove>:
 8005610:	4288      	cmp	r0, r1
 8005612:	b510      	push	{r4, lr}
 8005614:	eb01 0402 	add.w	r4, r1, r2
 8005618:	d902      	bls.n	8005620 <memmove+0x10>
 800561a:	4284      	cmp	r4, r0
 800561c:	4623      	mov	r3, r4
 800561e:	d807      	bhi.n	8005630 <memmove+0x20>
 8005620:	1e43      	subs	r3, r0, #1
 8005622:	42a1      	cmp	r1, r4
 8005624:	d008      	beq.n	8005638 <memmove+0x28>
 8005626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800562a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800562e:	e7f8      	b.n	8005622 <memmove+0x12>
 8005630:	4402      	add	r2, r0
 8005632:	4601      	mov	r1, r0
 8005634:	428a      	cmp	r2, r1
 8005636:	d100      	bne.n	800563a <memmove+0x2a>
 8005638:	bd10      	pop	{r4, pc}
 800563a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800563e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005642:	e7f7      	b.n	8005634 <memmove+0x24>

08005644 <_free_r>:
 8005644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005646:	2900      	cmp	r1, #0
 8005648:	d044      	beq.n	80056d4 <_free_r+0x90>
 800564a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564e:	9001      	str	r0, [sp, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f1a1 0404 	sub.w	r4, r1, #4
 8005656:	bfb8      	it	lt
 8005658:	18e4      	addlt	r4, r4, r3
 800565a:	f000 f913 	bl	8005884 <__malloc_lock>
 800565e:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <_free_r+0x94>)
 8005660:	9801      	ldr	r0, [sp, #4]
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	b933      	cbnz	r3, 8005674 <_free_r+0x30>
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	6014      	str	r4, [r2, #0]
 800566a:	b003      	add	sp, #12
 800566c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005670:	f000 b90e 	b.w	8005890 <__malloc_unlock>
 8005674:	42a3      	cmp	r3, r4
 8005676:	d908      	bls.n	800568a <_free_r+0x46>
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	1961      	adds	r1, r4, r5
 800567c:	428b      	cmp	r3, r1
 800567e:	bf01      	itttt	eq
 8005680:	6819      	ldreq	r1, [r3, #0]
 8005682:	685b      	ldreq	r3, [r3, #4]
 8005684:	1949      	addeq	r1, r1, r5
 8005686:	6021      	streq	r1, [r4, #0]
 8005688:	e7ed      	b.n	8005666 <_free_r+0x22>
 800568a:	461a      	mov	r2, r3
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b10b      	cbz	r3, 8005694 <_free_r+0x50>
 8005690:	42a3      	cmp	r3, r4
 8005692:	d9fa      	bls.n	800568a <_free_r+0x46>
 8005694:	6811      	ldr	r1, [r2, #0]
 8005696:	1855      	adds	r5, r2, r1
 8005698:	42a5      	cmp	r5, r4
 800569a:	d10b      	bne.n	80056b4 <_free_r+0x70>
 800569c:	6824      	ldr	r4, [r4, #0]
 800569e:	4421      	add	r1, r4
 80056a0:	1854      	adds	r4, r2, r1
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	d1e0      	bne.n	800566a <_free_r+0x26>
 80056a8:	681c      	ldr	r4, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	6053      	str	r3, [r2, #4]
 80056ae:	4421      	add	r1, r4
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	e7da      	b.n	800566a <_free_r+0x26>
 80056b4:	d902      	bls.n	80056bc <_free_r+0x78>
 80056b6:	230c      	movs	r3, #12
 80056b8:	6003      	str	r3, [r0, #0]
 80056ba:	e7d6      	b.n	800566a <_free_r+0x26>
 80056bc:	6825      	ldr	r5, [r4, #0]
 80056be:	1961      	adds	r1, r4, r5
 80056c0:	428b      	cmp	r3, r1
 80056c2:	bf04      	itt	eq
 80056c4:	6819      	ldreq	r1, [r3, #0]
 80056c6:	685b      	ldreq	r3, [r3, #4]
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	bf04      	itt	eq
 80056cc:	1949      	addeq	r1, r1, r5
 80056ce:	6021      	streq	r1, [r4, #0]
 80056d0:	6054      	str	r4, [r2, #4]
 80056d2:	e7ca      	b.n	800566a <_free_r+0x26>
 80056d4:	b003      	add	sp, #12
 80056d6:	bd30      	pop	{r4, r5, pc}
 80056d8:	20000240 	.word	0x20000240

080056dc <sbrk_aligned>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0e      	ldr	r6, [pc, #56]	; (8005718 <sbrk_aligned+0x3c>)
 80056e0:	460c      	mov	r4, r1
 80056e2:	6831      	ldr	r1, [r6, #0]
 80056e4:	4605      	mov	r5, r0
 80056e6:	b911      	cbnz	r1, 80056ee <sbrk_aligned+0x12>
 80056e8:	f000 f8bc 	bl	8005864 <_sbrk_r>
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 f8b7 	bl	8005864 <_sbrk_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d00a      	beq.n	8005710 <sbrk_aligned+0x34>
 80056fa:	1cc4      	adds	r4, r0, #3
 80056fc:	f024 0403 	bic.w	r4, r4, #3
 8005700:	42a0      	cmp	r0, r4
 8005702:	d007      	beq.n	8005714 <sbrk_aligned+0x38>
 8005704:	1a21      	subs	r1, r4, r0
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f8ac 	bl	8005864 <_sbrk_r>
 800570c:	3001      	adds	r0, #1
 800570e:	d101      	bne.n	8005714 <sbrk_aligned+0x38>
 8005710:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005714:	4620      	mov	r0, r4
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	20000244 	.word	0x20000244

0800571c <_malloc_r>:
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	1ccd      	adds	r5, r1, #3
 8005722:	f025 0503 	bic.w	r5, r5, #3
 8005726:	3508      	adds	r5, #8
 8005728:	2d0c      	cmp	r5, #12
 800572a:	bf38      	it	cc
 800572c:	250c      	movcc	r5, #12
 800572e:	2d00      	cmp	r5, #0
 8005730:	4607      	mov	r7, r0
 8005732:	db01      	blt.n	8005738 <_malloc_r+0x1c>
 8005734:	42a9      	cmp	r1, r5
 8005736:	d905      	bls.n	8005744 <_malloc_r+0x28>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	2600      	movs	r6, #0
 800573e:	4630      	mov	r0, r6
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	4e2e      	ldr	r6, [pc, #184]	; (8005800 <_malloc_r+0xe4>)
 8005746:	f000 f89d 	bl	8005884 <__malloc_lock>
 800574a:	6833      	ldr	r3, [r6, #0]
 800574c:	461c      	mov	r4, r3
 800574e:	bb34      	cbnz	r4, 800579e <_malloc_r+0x82>
 8005750:	4629      	mov	r1, r5
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ffc2 	bl	80056dc <sbrk_aligned>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	4604      	mov	r4, r0
 800575c:	d14d      	bne.n	80057fa <_malloc_r+0xde>
 800575e:	6834      	ldr	r4, [r6, #0]
 8005760:	4626      	mov	r6, r4
 8005762:	2e00      	cmp	r6, #0
 8005764:	d140      	bne.n	80057e8 <_malloc_r+0xcc>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4631      	mov	r1, r6
 800576a:	4638      	mov	r0, r7
 800576c:	eb04 0803 	add.w	r8, r4, r3
 8005770:	f000 f878 	bl	8005864 <_sbrk_r>
 8005774:	4580      	cmp	r8, r0
 8005776:	d13a      	bne.n	80057ee <_malloc_r+0xd2>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	3503      	adds	r5, #3
 800577c:	1a6d      	subs	r5, r5, r1
 800577e:	f025 0503 	bic.w	r5, r5, #3
 8005782:	3508      	adds	r5, #8
 8005784:	2d0c      	cmp	r5, #12
 8005786:	bf38      	it	cc
 8005788:	250c      	movcc	r5, #12
 800578a:	4629      	mov	r1, r5
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff ffa5 	bl	80056dc <sbrk_aligned>
 8005792:	3001      	adds	r0, #1
 8005794:	d02b      	beq.n	80057ee <_malloc_r+0xd2>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	442b      	add	r3, r5
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	e00e      	b.n	80057bc <_malloc_r+0xa0>
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	1b52      	subs	r2, r2, r5
 80057a2:	d41e      	bmi.n	80057e2 <_malloc_r+0xc6>
 80057a4:	2a0b      	cmp	r2, #11
 80057a6:	d916      	bls.n	80057d6 <_malloc_r+0xba>
 80057a8:	1961      	adds	r1, r4, r5
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	6025      	str	r5, [r4, #0]
 80057ae:	bf18      	it	ne
 80057b0:	6059      	strne	r1, [r3, #4]
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	bf08      	it	eq
 80057b6:	6031      	streq	r1, [r6, #0]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4638      	mov	r0, r7
 80057be:	f104 060b 	add.w	r6, r4, #11
 80057c2:	f000 f865 	bl	8005890 <__malloc_unlock>
 80057c6:	f026 0607 	bic.w	r6, r6, #7
 80057ca:	1d23      	adds	r3, r4, #4
 80057cc:	1af2      	subs	r2, r6, r3
 80057ce:	d0b6      	beq.n	800573e <_malloc_r+0x22>
 80057d0:	1b9b      	subs	r3, r3, r6
 80057d2:	50a3      	str	r3, [r4, r2]
 80057d4:	e7b3      	b.n	800573e <_malloc_r+0x22>
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	bf0c      	ite	eq
 80057dc:	6032      	streq	r2, [r6, #0]
 80057de:	605a      	strne	r2, [r3, #4]
 80057e0:	e7ec      	b.n	80057bc <_malloc_r+0xa0>
 80057e2:	4623      	mov	r3, r4
 80057e4:	6864      	ldr	r4, [r4, #4]
 80057e6:	e7b2      	b.n	800574e <_malloc_r+0x32>
 80057e8:	4634      	mov	r4, r6
 80057ea:	6876      	ldr	r6, [r6, #4]
 80057ec:	e7b9      	b.n	8005762 <_malloc_r+0x46>
 80057ee:	230c      	movs	r3, #12
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4638      	mov	r0, r7
 80057f4:	f000 f84c 	bl	8005890 <__malloc_unlock>
 80057f8:	e7a1      	b.n	800573e <_malloc_r+0x22>
 80057fa:	6025      	str	r5, [r4, #0]
 80057fc:	e7de      	b.n	80057bc <_malloc_r+0xa0>
 80057fe:	bf00      	nop
 8005800:	20000240 	.word	0x20000240

08005804 <_realloc_r>:
 8005804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005808:	4680      	mov	r8, r0
 800580a:	4614      	mov	r4, r2
 800580c:	460e      	mov	r6, r1
 800580e:	b921      	cbnz	r1, 800581a <_realloc_r+0x16>
 8005810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005814:	4611      	mov	r1, r2
 8005816:	f7ff bf81 	b.w	800571c <_malloc_r>
 800581a:	b92a      	cbnz	r2, 8005828 <_realloc_r+0x24>
 800581c:	f7ff ff12 	bl	8005644 <_free_r>
 8005820:	4625      	mov	r5, r4
 8005822:	4628      	mov	r0, r5
 8005824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005828:	f000 f838 	bl	800589c <_malloc_usable_size_r>
 800582c:	4284      	cmp	r4, r0
 800582e:	4607      	mov	r7, r0
 8005830:	d802      	bhi.n	8005838 <_realloc_r+0x34>
 8005832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005836:	d812      	bhi.n	800585e <_realloc_r+0x5a>
 8005838:	4621      	mov	r1, r4
 800583a:	4640      	mov	r0, r8
 800583c:	f7ff ff6e 	bl	800571c <_malloc_r>
 8005840:	4605      	mov	r5, r0
 8005842:	2800      	cmp	r0, #0
 8005844:	d0ed      	beq.n	8005822 <_realloc_r+0x1e>
 8005846:	42bc      	cmp	r4, r7
 8005848:	4622      	mov	r2, r4
 800584a:	4631      	mov	r1, r6
 800584c:	bf28      	it	cs
 800584e:	463a      	movcs	r2, r7
 8005850:	f7ff fed0 	bl	80055f4 <memcpy>
 8005854:	4631      	mov	r1, r6
 8005856:	4640      	mov	r0, r8
 8005858:	f7ff fef4 	bl	8005644 <_free_r>
 800585c:	e7e1      	b.n	8005822 <_realloc_r+0x1e>
 800585e:	4635      	mov	r5, r6
 8005860:	e7df      	b.n	8005822 <_realloc_r+0x1e>
	...

08005864 <_sbrk_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d06      	ldr	r5, [pc, #24]	; (8005880 <_sbrk_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	f7fb fcae 	bl	80011d0 <_sbrk>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_sbrk_r+0x1a>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_sbrk_r+0x1a>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	20000248 	.word	0x20000248

08005884 <__malloc_lock>:
 8005884:	4801      	ldr	r0, [pc, #4]	; (800588c <__malloc_lock+0x8>)
 8005886:	f000 b811 	b.w	80058ac <__retarget_lock_acquire_recursive>
 800588a:	bf00      	nop
 800588c:	2000024c 	.word	0x2000024c

08005890 <__malloc_unlock>:
 8005890:	4801      	ldr	r0, [pc, #4]	; (8005898 <__malloc_unlock+0x8>)
 8005892:	f000 b80c 	b.w	80058ae <__retarget_lock_release_recursive>
 8005896:	bf00      	nop
 8005898:	2000024c 	.word	0x2000024c

0800589c <_malloc_usable_size_r>:
 800589c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a0:	1f18      	subs	r0, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bfbc      	itt	lt
 80058a6:	580b      	ldrlt	r3, [r1, r0]
 80058a8:	18c0      	addlt	r0, r0, r3
 80058aa:	4770      	bx	lr

080058ac <__retarget_lock_acquire_recursive>:
 80058ac:	4770      	bx	lr

080058ae <__retarget_lock_release_recursive>:
 80058ae:	4770      	bx	lr

080058b0 <_init>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	bf00      	nop
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr

080058bc <_fini>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	bf00      	nop
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr
